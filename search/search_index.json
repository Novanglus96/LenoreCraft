{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"LenoreTemplate <p>     A simple shopping app.      Explore the docs \u00bb View Demo     \u00b7     Report Bug     \u00b7     Request Feature </p> Table of Contents <ol> <li> About The Project <ul> <li>Built With</li> </ul> </li> <li> Getting Started <ul> <li>Prerequisites</li> <li>Installation</li> </ul> </li> <li>Usage</li> <li>Roadmap</li> <li>Contributing</li> <li>License</li> <li>Contact</li> <li>Acknowledgments</li> </ol>"},{"location":"#about-the-project","title":"About The Project","text":"<p>A bit aboout this project. Here's a blank template to get started: To avoid retyping too much info. Do a search and replace with your text editor for the following: <code>Gamunda</code>, <code>LenoreFin</code>, <code>twitter_handle</code>, <code>linkedin_username</code>, <code>email_client</code>, <code>email</code>, <code>LenoreFin</code>, <code>project_description</code></p> <p>(back to top)</p>"},{"location":"#built-with","title":"Built With","text":"<p>(back to top)</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>This is an example of how you may give instructions on setting up your project locally. To get a local copy up and running follow these simple example steps.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>This is an example of how to list things you need to use the software and how to install them. * npm   <code>sh   npm install npm@latest -g</code></p>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Get a free API Key at https://example.com</li> <li>Clone the repo    <code>sh    git clone https://github.com/Gamunda/LenoreFin.git</code></li> <li>Install NPM packages    <code>sh    npm install</code></li> <li>Enter your API in <code>config.js</code> <code>js    const API_KEY = 'ENTER YOUR API';</code></li> </ol> <p>(back to top)</p>"},{"location":"#usage","title":"Usage","text":"<p>Use this space to show useful examples of how a project can be used. Additional screenshots, code examples and demos work well in this space. You may also link to more resources.</p> <p>For more examples, please refer to the Documentation</p> <p>(back to top)</p>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>[ ] Feature 1</li> <li>[ ] Feature 2</li> <li>[ ] Feature 3<ul> <li>[ ] Nested Feature</li> </ul> </li> </ul> <p>See the open issues for a full list of proposed features (and known issues).</p> <p>(back to top)</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated.</p> <p>If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again!</p> <ol> <li>Fork the Project</li> <li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your Changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol> <p>(back to top)</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the MIT License. See <code>LICENSE.txt</code> for more information.</p> <p>(back to top)</p>"},{"location":"#support","title":"Support","text":"<p>Or</p> <p> </p>"},{"location":"#contact","title":"Contact","text":"<p>Your Name - @twitter_handle - email@email_client.com</p> <p>Project Link: https://github.com/Gamunda/LenoreFin</p> <p>(back to top)</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>(back to top)</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#administration","title":"Administration","text":""},{"location":"api/#dependencies","title":"Dependencies","text":""},{"location":"api/#administration.api.dependencies.auth.GlobalAuth","title":"<code>GlobalAuth</code>","text":"<p>Class to authenticate access to API</p> <p>Parameters:</p> Name Type Description Default <code>HttpBearer</code> required Source code in <code>backend/administration/api/dependencies/auth.py</code> <pre><code>class GlobalAuth(HttpBearer):\n    \"\"\"\n    Class to authenticate access to API\n\n    Args:\n        HttpBearer ():\n    \"\"\"\n\n    def authenticate(self, request, token):\n        \"\"\"\n        Method to authenticate to api based on token provided\n\n        Args:\n            request (request): the request object\n            token (token): the API token to authenticate\n\n        Returns:\n            token (api_key): the api key\n        \"\"\"\n        api_key = config(\"VITE_API_KEY\", default=None)\n        if token == api_key:\n            return token\n</code></pre>"},{"location":"api/#administration.api.dependencies.auth.GlobalAuth.authenticate","title":"<code>authenticate(request, token)</code>","text":"<p>Method to authenticate to api based on token provided</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request</code> <p>the request object</p> required <code>token</code> <code>token</code> <p>the API token to authenticate</p> required <p>Returns:</p> Name Type Description <code>token</code> <code>api_key</code> <p>the api key</p> Source code in <code>backend/administration/api/dependencies/auth.py</code> <pre><code>def authenticate(self, request, token):\n    \"\"\"\n    Method to authenticate to api based on token provided\n\n    Args:\n        request (request): the request object\n        token (token): the API token to authenticate\n\n    Returns:\n        token (api_key): the api key\n    \"\"\"\n    api_key = config(\"VITE_API_KEY\", default=None)\n    if token == api_key:\n        return token\n</code></pre>"},{"location":"api/#administration.api.dependencies.current_date.current_date","title":"<code>current_date()</code>","text":"<p>Gets a timezone adjusted date for todays date.</p> <p>Returns:</p> Type Description <code>Date</code> <p>Timezone adjusted date</p> Source code in <code>backend/administration/api/dependencies/current_date.py</code> <pre><code>def current_date():\n    \"\"\"\n    Gets a timezone adjusted date for todays date.\n\n    Returns:\n        (Date): Timezone adjusted date\n    \"\"\"\n    today = timezone.now()\n    tz_timezone = pytz.timezone(os.environ.get(\"TIMEZONE\"))\n    today_tz = today.astimezone(tz_timezone).date()\n    return today_tz\n</code></pre>"},{"location":"api/#administration.api.dependencies.paginate_list.paginate_list","title":"<code>paginate_list(item_list, page_size, page)</code>","text":"<p>Takes a recordset and returns it paginated. If page_size is 0, return all records.</p> <p>Parameters:</p> Name Type Description Default <code>item_list</code> <code>RecordSet</code> <p>A record set.  Required.</p> required <code>page_size</code> <code>int</code> <p>The number of items per page. Required.</p> required <code>page</code> <code>int</code> <p>The current page. Required.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>(paginated_list (list), total_records (int), total_pages (int))</p> Source code in <code>backend/administration/api/dependencies/paginate_list.py</code> <pre><code>def paginate_list(item_list, page_size: int, page: int):\n    \"\"\"\n    Takes a recordset and returns it paginated. If page_size is 0,\n    return all records.\n\n    Args:\n        item_list (RecordSet): A record set.  Required.\n        page_size (int): The number of items per page. Required.\n        page (int): The current page. Required.\n\n    Returns:\n        (tuple): (paginated_list (list), total_records (int), total_pages (int))\n    \"\"\"\n    # Paginate items\n    total_pages = 1\n    paginated_list = None\n    total_records = 0\n    if page_size &gt; 0:\n        paginator = None\n        paginator = Paginator(item_list, page_size)\n        page_obj = paginator.page(page)\n        paginated_list = list(page_obj.object_list)\n        total_pages = paginator.num_pages\n        total_records = len(item_list)\n    else:\n        paginated_list = list(item_list)\n        total_records = len(paginated_list)\n    return paginated_list, total_records, total_pages\n</code></pre>"},{"location":"api/#views","title":"Views","text":""},{"location":"api/#administration.api.views.version.list_version","title":"<code>list_version(request)</code>","text":"<p>The function <code>list_version</code> retrieves the app version number from the backend.</p> Endpoint <ul> <li>Path: <code>/api/v1/administration/version/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>VersionOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>VersionOut</code> <p>a version object</p> Source code in <code>backend/administration/api/views/version.py</code> <pre><code>@version_router.get(\"/list\", response=VersionOut)\ndef list_version(request):\n    \"\"\"\n    The function `list_version` retrieves the app version number\n    from the backend.\n\n    Endpoint:\n        - **Path**: `/api/v1/administration/version/list`\n        - **Method**: `GET`\n        - **Response Model**: `VersionOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (VersionOut): a version object\n    \"\"\"\n\n    try:\n        qs = get_object_or_404(Version, id=1)\n        return qs\n    except Exception as e:\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#schemas","title":"Schemas","text":""},{"location":"api/#administration.api.schemas.version.VersionOut","title":"<code>VersionOut</code>","text":"<p>Schema to represent a Version</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the Version. Required.</p> <code>version_number</code> <code>str</code> <p>The version number. Required.</p> Source code in <code>backend/administration/api/schemas/version.py</code> <pre><code>class VersionOut(Schema):\n    \"\"\"\n    Schema to represent a Version\n\n    Attributes:\n        id (int): The id of the Version. Required.\n        version_number (str): The version number. Required.\n    \"\"\"\n\n    id: int\n    version_number: str\n</code></pre>"},{"location":"api/#material","title":"Material","text":""},{"location":"api/#dependencies_1","title":"Dependencies","text":""},{"location":"api/#views_1","title":"Views","text":""},{"location":"api/#material.api.views.material.create_material","title":"<code>create_material(request, payload)</code>","text":"<p>The function <code>create_material</code> creates a Material</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material/create</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>MaterialIn</code> <p>An object using schema of MaterialIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created Material</p> Source code in <code>backend/material/api/views/material.py</code> <pre><code>@material_router.post(\"/create\")\ndef create_material(request, payload: MaterialIn):\n    \"\"\"\n    The function `create_material` creates a Material\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material/create`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (MaterialIn): An object using schema of MaterialIn.\n\n    Returns:\n        id (int): returns the id of the created Material\n    \"\"\"\n\n    try:\n        material = Material.objects.create(**payload.dict())\n        return {\"id\": material.id}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Material already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record creation error\")\n</code></pre>"},{"location":"api/#material.api.views.material_object.create_material_object","title":"<code>create_material_object(request, payload)</code>","text":"<p>The function <code>create_material_object</code> creates a MaterialObject</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material_object/create</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>MaterialObjectIn</code> <p>An object using schema of MaterialObjectIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created MaterialObject</p> Source code in <code>backend/material/api/views/material_object.py</code> <pre><code>@material_object_router.post(\"/create\")\ndef create_material_object(request, payload: MaterialObjectIn):\n    \"\"\"\n    The function `create_material_object` creates a MaterialObject\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material_object/create`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (MaterialObjectIn): An object using schema of MaterialObjectIn.\n\n    Returns:\n        id (int): returns the id of the created MaterialObject\n    \"\"\"\n\n    try:\n        material_object = MaterialObject.objects.create(**payload.dict())\n        return {\"id\": material_object.id}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"MaterialObject already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record creation error\")\n</code></pre>"},{"location":"api/#material.api.views.store.create_store","title":"<code>create_store(request, payload)</code>","text":"<p>The function <code>create_store</code> creates a store</p> Endpoint <ul> <li>Path: <code>/api/v1/store/create</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>StoreIn</code> <p>An object using schema of StoreIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created store</p> Source code in <code>backend/material/api/views/store.py</code> <pre><code>@store_router.post(\"/create\")\ndef create_store(request, payload: StoreIn):\n    \"\"\"\n    The function `create_store` creates a store\n\n    Endpoint:\n        - **Path**: `/api/v1/store/create`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (StoreIn): An object using schema of StoreIn.\n\n    Returns:\n        id (int): returns the id of the created store\n    \"\"\"\n\n    try:\n        store = Store.objects.create(**payload.dict())\n        return {\"id\": store.id}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Store already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record creation error\")\n</code></pre>"},{"location":"api/#material.api.views.material.delete_material","title":"<code>delete_material(request, material_id)</code>","text":"<p>The function <code>delete_material</code> deletes the Material specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material/delete/{material_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>material_id</code> <code>int</code> <p>the id of the Material to delete</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Material with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/material.py</code> <pre><code>@material_router.delete(\"/delete/{material_id}\")\ndef delete_material(request, material_id: int):\n    \"\"\"\n    The function `delete_material` deletes the Material specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material/delete/{material_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        material_id (int): the id of the Material to delete\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Material with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        material = get_object_or_404(Material, id=material_id)\n        material.delete()\n        return {\"success\": True}\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.material_object.delete_material_object","title":"<code>delete_material_object(request, material_object_id)</code>","text":"<p>The function <code>delete_material_object</code> deletes the MaterialObject specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material_object/delete/{material_object_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>material_object_id</code> <code>int</code> <p>the id of the MaterialObject to delete</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the MaterialObject with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/material_object.py</code> <pre><code>@material_object_router.delete(\"/delete/{material_object_id}\")\ndef delete_material_object(request, material_object_id: int):\n    \"\"\"\n    The function `delete_material_object` deletes the MaterialObject specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material_object/delete/{material_object_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        material_object_id (int): the id of the MaterialObject to delete\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the MaterialObject with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        material_object = get_object_or_404(\n            MaterialObject, id=material_object_id\n        )\n        material_object.delete()\n        return {\"success\": True}\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.store.delete_store","title":"<code>delete_store(request, store_id)</code>","text":"<p>The function <code>delete_store</code> deletes the store specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/store/delete/{store_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>store_id</code> <code>int</code> <p>the id of the store to delete</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the store with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/store.py</code> <pre><code>@store_router.delete(\"/delete/{store_id}\")\ndef delete_store(request, store_id: int):\n    \"\"\"\n    The function `delete_store` deletes the store specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/store/delete/{store_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        store_id (int): the id of the store to delete\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the store with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        store = get_object_or_404(Store, id=store_id)\n        store.delete()\n        return {\"success\": True}\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.material.get_material","title":"<code>get_material(request, material_id)</code>","text":"<p>The function <code>get_material</code> retrieves the Material by id</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material/get/{material_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>MaterialOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>material_id</code> <code>int</code> <p>The id of the Material to retrieve.</p> required <p>Returns:</p> Type Description <code>MaterialOut</code> <p>The Material object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Material with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/material.py</code> <pre><code>@material_router.get(\n    \"/get/{material_id}\",\n    response=MaterialOut,\n)\ndef get_material(request, material_id: int):\n    \"\"\"\n    The function `get_material` retrieves the Material by id\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material/get/{material_id}`\n        - **Method**: `GET`\n        - **Response Model**: `MaterialOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        material_id (int): The id of the Material to retrieve.\n\n    Returns:\n        (MaterialOut): The Material object\n\n    Raises:\n        Http404: If the Material with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        material = get_object_or_404(Material, id=material_id)\n        return material\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.material_object.get_material_object","title":"<code>get_material_object(request, material_object_id)</code>","text":"<p>The function <code>get_material_object</code> retrieves the MaterialObject by id</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material_object/get/{material_object_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>MaterialObjectOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>material_object_id</code> <code>int</code> <p>The id of the MaterialObject to retrieve.</p> required <p>Returns:</p> Type Description <code>MaterialObjectOut</code> <p>The MaterialObject object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the MaterialObject with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/material_object.py</code> <pre><code>@material_object_router.get(\n    \"/get/{material_object_id}\",\n    response=MaterialObjectOut,\n)\ndef get_material_object(request, material_object_id: int):\n    \"\"\"\n    The function `get_material_object` retrieves the MaterialObject by id\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material_object/get/{material_object_id}`\n        - **Method**: `GET`\n        - **Response Model**: `MaterialObjectOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        material_object_id (int): The id of the MaterialObject to retrieve.\n\n    Returns:\n        (MaterialObjectOut): The MaterialObject object\n\n    Raises:\n        Http404: If the MaterialObject with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        material_object = get_object_or_404(\n            MaterialObject, id=material_object_id\n        )\n        return material_object\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.material_status.get_material_status","title":"<code>get_material_status(request, material_status_id)</code>","text":"<p>The function <code>get_material_status</code> retrieves the MaterialStatus by id</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material_status/get/{material_status_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>MaterialStatusOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>material_status_id</code> <code>int</code> <p>The id of the MaterialStatus to retrieve.</p> required <p>Returns:</p> Type Description <code>MaterialStatusOut</code> <p>The MaterialStatus object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the MaterialStatus with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/material_status.py</code> <pre><code>@material_status_router.get(\n    \"/get/{material_status_id}\",\n    response=MaterialStatusOut,\n)\ndef get_material_status(request, material_status_id: int):\n    \"\"\"\n    The function `get_material_status` retrieves the MaterialStatus by id\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material_status/get/{material_status_id}`\n        - **Method**: `GET`\n        - **Response Model**: `MaterialStatusOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        material_status_id (int): The id of the MaterialStatus to retrieve.\n\n    Returns:\n        (MaterialStatusOut): The MaterialStatus object\n\n    Raises:\n        Http404: If the MaterialStatus with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        material_status = get_object_or_404(\n            MaterialStatus, id=material_status_id\n        )\n        return material_status\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.store.get_store","title":"<code>get_store(request, store_id)</code>","text":"<p>The function <code>get_store</code> retrieves the store by id</p> Endpoint <ul> <li>Path: <code>/api/v1/store/get/{store_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>StoreOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>store_id</code> <code>int</code> <p>The id of the store to retrieve.</p> required <p>Returns:</p> Type Description <code>StoreOut</code> <p>The store object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the store with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/store.py</code> <pre><code>@store_router.get(\n    \"/get/{store_id}\",\n    response=StoreOut,\n)\ndef get_store(request, store_id: int):\n    \"\"\"\n    The function `get_store` retrieves the store by id\n\n    Endpoint:\n        - **Path**: `/api/v1/store/get/{store_id}`\n        - **Method**: `GET`\n        - **Response Model**: `StoreOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        store_id (int): The id of the store to retrieve.\n\n    Returns:\n        (StoreOut): The store object\n\n    Raises:\n        Http404: If the store with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        store = get_object_or_404(Store, id=store_id)\n        return store\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.wood_species.get_wood_species","title":"<code>get_wood_species(request, wood_species_id)</code>","text":"<p>The function <code>get_wood_species</code> retrieves the WoodSpecies by id</p> Endpoint <ul> <li>Path: <code>/api/v1/material/wood_species/get/{wood_species_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>WoodSpeciesOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>wood_species_id</code> <code>int</code> <p>The id of the WoodSpecies to retrieve.</p> required <p>Returns:</p> Type Description <code>WoodSpeciesOut</code> <p>The WoodSpecies object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the WoodSpecies with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/wood_species.py</code> <pre><code>@wood_species_router.get(\n    \"/get/{wood_species_id}\",\n    response=WoodSpeciesOut,\n)\ndef get_wood_species(request, wood_species_id: int):\n    \"\"\"\n    The function `get_wood_species` retrieves the WoodSpecies by id\n\n    Endpoint:\n        - **Path**: `/api/v1/material/wood_species/get/{wood_species_id}`\n        - **Method**: `GET`\n        - **Response Model**: `WoodSpeciesOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        wood_species_id (int): The id of the WoodSpecies to retrieve.\n\n    Returns:\n        (WoodSpeciesOut): The WoodSpecies object\n\n    Raises:\n        Http404: If the WoodSpecies with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        wood_species = get_object_or_404(WoodSpecies, id=wood_species_id)\n        return wood_species\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.material.list_materials","title":"<code>list_materials(request)</code>","text":"<p>The function <code>list_materials</code> retrieves a list of materials, ordered by material_name ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>MaterialOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>MaterialOut</code> <p>a list of Material objects</p> Source code in <code>backend/material/api/views/material.py</code> <pre><code>@material_router.get(\"/list\", response=List[MaterialOut])\ndef list_materials(request):\n    \"\"\"\n    The function `list_materials` retrieves a list of materials,\n    ordered by material_name ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material/list`\n        - **Method**: `GET`\n        - **Response Model**: `MaterialOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (MaterialOut): a list of Material objects\n    \"\"\"\n\n    try:\n        qs = Material.objects.all().order_by(\n            \"material_object__material_object_name\"\n        )\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.material_object.list_material_objects","title":"<code>list_material_objects(request)</code>","text":"<p>The function <code>list_material_objects</code> retrieves a list of material_objects, ordered by material_object_name ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material_object/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>MaterialObjectOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>MaterialObjectOut</code> <p>a list of MaterialObject objects</p> Source code in <code>backend/material/api/views/material_object.py</code> <pre><code>@material_object_router.get(\"/list\", response=List[MaterialObjectOut])\ndef list_material_objects(request):\n    \"\"\"\n    The function `list_material_objects` retrieves a list of material_objects,\n    ordered by material_object_name ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material_object/list`\n        - **Method**: `GET`\n        - **Response Model**: `MaterialObjectOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (MaterialObjectOut): a list of MaterialObject objects\n    \"\"\"\n\n    try:\n        qs = MaterialObject.objects.all().order_by(\"material_object_name\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.material_status.list_material_statuses","title":"<code>list_material_statuses(request)</code>","text":"<p>The function <code>list_material_statuses</code> retrieves a list of material_statuses, ordered by id ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material_status/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>MaterialStatusOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>MaterialStatusOut</code> <p>a list of MaterialStatus objects</p> Source code in <code>backend/material/api/views/material_status.py</code> <pre><code>@material_status_router.get(\"/list\", response=List[MaterialStatusOut])\ndef list_material_statuses(request):\n    \"\"\"\n    The function `list_material_statuses` retrieves a list of material_statuses,\n    ordered by id ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material_status/list`\n        - **Method**: `GET`\n        - **Response Model**: `MaterialStatusOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (MaterialStatusOut): a list of MaterialStatus objects\n    \"\"\"\n\n    try:\n        qs = MaterialStatus.objects.all().order_by(\"id\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.store.list_stores","title":"<code>list_stores(request)</code>","text":"<p>The function <code>list_stores</code> retrieves a list of storees, ordered by store_name ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/store/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>StoreOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>StoreOut</code> <p>a list of store objects</p> Source code in <code>backend/material/api/views/store.py</code> <pre><code>@store_router.get(\"/list\", response=List[StoreOut])\ndef list_stores(request):\n    \"\"\"\n    The function `list_stores` retrieves a list of storees,\n    ordered by store_name ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/store/list`\n        - **Method**: `GET`\n        - **Response Model**: `StoreOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (StoreOut): a list of store objects\n    \"\"\"\n\n    try:\n        qs = Store.objects.all().order_by(\"store_name\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.wood_species.list_wood_species","title":"<code>list_wood_species(request)</code>","text":"<p>The function <code>list_wood_species</code> retrieves a list of wood_species, ordered by id ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/material/wood_species/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>WoodSpeciesOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>WoodSpeciesOut</code> <p>a list of WoodSpecies objects</p> Source code in <code>backend/material/api/views/wood_species.py</code> <pre><code>@wood_species_router.get(\"/list\", response=List[WoodSpeciesOut])\ndef list_wood_species(request):\n    \"\"\"\n    The function `list_wood_species` retrieves a list of wood_species,\n    ordered by id ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/material/wood_species/list`\n        - **Method**: `GET`\n        - **Response Model**: `WoodSpeciesOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (WoodSpeciesOut): a list of WoodSpecies objects\n    \"\"\"\n\n    try:\n        qs = WoodSpecies.objects.all().order_by(\"id\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#material.api.views.material.update_material","title":"<code>update_material(request, material_id, payload)</code>","text":"<p>The function <code>update_material</code> updates the Material specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material/get/{material_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>material_id</code> <code>int</code> <p>the id of the Material to update</p> required <code>payload</code> <code>MaterialIn</code> <p>a Material object</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Material with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/material.py</code> <pre><code>@material_router.put(\"/update/{material_id}\")\ndef update_material(request, material_id: int, payload: MaterialIn):\n    \"\"\"\n    The function `update_material` updates the Material specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material/get/{material_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        material_id (int): the id of the Material to update\n        payload (MaterialIn): a Material object\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Material with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        material = get_object_or_404(Material, id=material_id)\n        material.material_name = payload.material_object.material_object_name\n        material.save()\n        return {\"success\": True}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Material already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record update error\")\n</code></pre>"},{"location":"api/#material.api.views.material_object.update_material_object","title":"<code>update_material_object(request, material_object_id, payload)</code>","text":"<p>The function <code>update_material_object</code> updates the MaterialObject specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/material/material_object/get/{material_object_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>material_object_id</code> <code>int</code> <p>the id of the MaterialObject to update</p> required <code>payload</code> <code>MaterialObjectIn</code> <p>a MaterialObject object</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the MaterialObject with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/material_object.py</code> <pre><code>@material_object_router.put(\"/update/{material_object_id}\")\ndef update_material_object(\n    request, material_object_id: int, payload: MaterialObjectIn\n):\n    \"\"\"\n    The function `update_material_object` updates the MaterialObject specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/material/material_object/get/{material_object_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        material_object_id (int): the id of the MaterialObject to update\n        payload (MaterialObjectIn): a MaterialObject object\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the MaterialObject with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        material_object = get_object_or_404(\n            MaterialObject, id=material_object_id\n        )\n        material_object.material_object_name = payload.material_object_name\n        material_object.save()\n        return {\"success\": True}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"MaterialObject already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record update error\")\n</code></pre>"},{"location":"api/#material.api.views.store.update_store","title":"<code>update_store(request, store_id, payload)</code>","text":"<p>The function <code>update_store</code> updates the store specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/store/get/{store_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>store_id</code> <code>int</code> <p>the id of the store to update</p> required <code>payload</code> <code>StoreIn</code> <p>a store object</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the store with the specified ID does not exist.</p> Source code in <code>backend/material/api/views/store.py</code> <pre><code>@store_router.put(\"/update/{store_id}\")\ndef update_store(request, store_id: int, payload: StoreIn):\n    \"\"\"\n    The function `update_store` updates the store specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/store/get/{store_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        store_id (int): the id of the store to update\n        payload (StoreIn): a store object\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the store with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        store = get_object_or_404(Store, id=store_id)\n        store.store_name = payload.store_name\n        store.save()\n        return {\"success\": True}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Store already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record update error\")\n</code></pre>"},{"location":"api/#schemas_1","title":"Schemas","text":""},{"location":"api/#material.api.schemas.material.MaterialIn","title":"<code>MaterialIn</code>","text":"<p>Schema to validate a Material</p> <p>Attributes:</p> Name Type Description <code>material_object_id</code> <code>int</code> <p>The ID of a MaterialObject. Required.</p> <code>quantity</code> <code>int</code> <p>The number of MaterialObjects. Required. Defaults to 1.</p> <code>material_status_id</code> <code>Optional[int]</code> <p>The ID of a MaterialStatus. Defaults to None.</p> <code>project_id</code> <code>Optional[int]</code> <p>The ID of a Project. Defaults to None.</p> Source code in <code>backend/material/api/schemas/material.py</code> <pre><code>class MaterialIn(Schema):\n    \"\"\"\n    Schema to validate a Material\n\n    Attributes:\n        material_object_id (int): The ID of a MaterialObject. Required.\n        quantity (int): The number of MaterialObjects. Required. Defaults to 1.\n        material_status_id (Optional[int]): The ID of a MaterialStatus. Defaults\n            to None.\n        project_id (Optional[int]): The ID of a Project. Defaults to None.\n    \"\"\"\n\n    material_object_id: int\n    quantity: int = 1\n    material_status_id: Optional[int] = None\n    project_id: Optional[int] = None\n</code></pre>"},{"location":"api/#material.api.schemas.material.MaterialOut","title":"<code>MaterialOut</code>","text":"<p>Schema to represent a Material</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the Material.  Required.</p> <code>material_object</code> <code>MaterialObjectOut</code> <p>A reference to a MaterialObject. Required.</p> <code>quantity</code> <code>int</code> <p>The number of MaterialObjects. Required. Defaults to 1.</p> <code>material_status</code> <code>Optional[MaterialStatusOut]</code> <p>A reference to a MaterialStatus. Defaults to None.</p> <code>project</code> <code>Optional[ProjectOut]</code> <p>A reference to a Project. Defaults to None.</p> Source code in <code>backend/material/api/schemas/material.py</code> <pre><code>class MaterialOut(Schema):\n    \"\"\"\n    Schema to represent a Material\n\n    Attributes:\n        id (int): The id of the Material.  Required.\n        material_object (MaterialObjectOut): A reference to a MaterialObject. Required.\n        quantity (int): The number of MaterialObjects. Required. Defaults to 1.\n        material_status (Optional[MaterialStatusOut]): A reference to a MaterialStatus. Defaults\n            to None.\n        project (Optional[ProjectOut]): A reference to a Project. Defaults to None.\n    \"\"\"\n\n    id: int\n    material_object: MaterialObjectOut\n    quantity: int = 1\n    material_status: Optional[MaterialStatusOut] = None\n    project: Optional[ProjectOut]\n</code></pre>"},{"location":"api/#material.api.schemas.material_object.MaterialObjectIn","title":"<code>MaterialObjectIn</code>","text":"<p>Schema to validate a MaterialObject</p> <p>Attributes:</p> Name Type Description <code>material_object_name</code> <code>str</code> <p>The name of the material object. Required.</p> <code>thickness_in</code> <code>Optional[Decimal]</code> <p>The thickness in inches. Defaults to None.</p> <code>thickness_in</code> <code>Optional[Decimal]</code> <p>The thickness of the material object in inches. Defaults to None.</p> <code>width_in</code> <code>Optional[Decimal]</code> <p>The width of the material object in inches. Defaults to None.</p> <code>length_in</code> <code>Optional[Decimal]</code> <p>The length of the material object in inches. Defaults to None.</p> <code>wood_species_id</code> <code>Optional[int]</code> <p>An instance of WoodSpecies.  Defaults to None.</p> <code>store_id</code> <code>Optional[int]</code> <p>An instance of Store.  Defaults to None.</p> <code>store_aisle</code> <code>Optional[str]</code> <p>The aisle of Store this material object is found. Defaults to None.</p> <code>store_bin</code> <code>Optional[str]</code> <p>The bin of the aisle this material object is found. Defaults to None.</p> <code>store_price</code> <code>Optional[Decimal]</code> <p>The price at the store of this material object. Defaults to None.</p> Source code in <code>backend/material/api/schemas/material_object.py</code> <pre><code>class MaterialObjectIn(Schema):\n    \"\"\"\n    Schema to validate a MaterialObject\n\n    Attributes:\n        material_object_name (str): The name of the material object. Required.\n        thickness_in (Optional[Decimal]): The thickness in inches. Defaults to None.\n        thickness_in (Optional[Decimal]): The thickness of the material object in inches.\n            Defaults to None.\n        width_in (Optional[Decimal]): The width of the material object in inches. Defaults\n            to None.\n        length_in (Optional[Decimal]): The length of the material object in inches. Defaults\n            to None.\n        wood_species_id (Optional[int]): An instance of WoodSpecies.  Defaults to None.\n        store_id (Optional[int]): An instance of Store.  Defaults to None.\n        store_aisle (Optional[str]): The aisle of Store this material object is found. Defaults\n            to None.\n        store_bin (Optional[str]): The bin of the aisle this material object is found. Defaults\n            to None.\n        store_price (Optional[Decimal]): The price at the store of this material object. Defaults\n            to None.\n    \"\"\"\n\n    material_object_name: str\n    thickness_in: Decimal = Field(\n        whole_digits=10, decimal_places=5, default=None\n    )\n    width_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n    length_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n    wood_species_id: Optional[int]\n    store_id: Optional[int] = None\n    store_aisle: Optional[str] = None\n    store_bin: Optional[str] = None\n    store_price: Decimal = Field(\n        whole_digits=10, decimal_places=2, default=0.00\n    )\n</code></pre>"},{"location":"api/#material.api.schemas.material_object.MaterialObjectOut","title":"<code>MaterialObjectOut</code>","text":"<p>Schema to represent a MaterialObject</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the MaterialObject. Required.</p> <code>material_object_name</code> <code>str</code> <p>The name of the material object. Required.</p> <code>thickness_in</code> <code>Optional[Decimal]</code> <p>The thickness of the material object in inches. Defaults to None.</p> <code>width_in</code> <code>Optional[Decimal]</code> <p>The width of the material object in inches. Defaults to None.</p> <code>length_in</code> <code>Optional[Decimal]</code> <p>The length of the material object in inches. Defaults to None.</p> <code>wood_species</code> <code>Optional[WoodSpeciesOut]</code> <p>An instance of WoodSpecies. Defaults to None.</p> <code>store</code> <code>Optioanl[StoreOut]</code> <p>An instance of Store. Defaults to None.</p> <code>store_aisle</code> <code>Optional[str]</code> <p>The aisle of Store this material object is found. Defaults to None.</p> <code>store_bin</code> <code>Optional[str]</code> <p>The bin of the aisle this material object is found. Defaults to None.</p> <code>store_price</code> <code>Optional[Decimal]</code> <p>The price at the store of this material object. Defaults to 0.00.</p> Source code in <code>backend/material/api/schemas/material_object.py</code> <pre><code>class MaterialObjectOut(Schema):\n    \"\"\"\n    Schema to represent a MaterialObject\n\n    Attributes:\n        id (int): The id of the MaterialObject. Required.\n        material_object_name (str): The name of the material object. Required.\n        thickness_in (Optional[Decimal]): The thickness of the material object in inches.\n            Defaults to None.\n        width_in (Optional[Decimal]): The width of the material object in inches. Defaults\n            to None.\n        length_in (Optional[Decimal]): The length of the material object in inches. Defaults to\n            None.\n        wood_species (Optional[WoodSpeciesOut]): An instance of WoodSpecies. Defaults to None.\n        store (Optioanl[StoreOut]): An instance of Store. Defaults to None.\n        store_aisle (Optional[str]): The aisle of Store this material object is found. Defaults\n            to None.\n        store_bin (Optional[str]): The bin of the aisle this material object is found. Defaults to\n            None.\n        store_price (Optional[Decimal]): The price at the store of this material object. Defaults to\n            0.00.\n    \"\"\"\n\n    id: int\n    material_object_name: str\n    thickness_in: Decimal = Field(\n        whole_digits=10, decimal_places=5, default=None\n    )\n    width_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n    length_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n    wood_species: Optional[WoodSpeciesOut] = None\n    store: Optional[StoreOut] = None\n    store_aisle: Optional[str] = None\n    store_bin: Optional[str] = None\n    store_price: Decimal = Field(\n        whole_digits=10, decimal_places=2, default=0.00\n    )\n</code></pre>"},{"location":"api/#material.api.schemas.material_status.MaterialStatusOut","title":"<code>MaterialStatusOut</code>","text":"<p>Schema to represent a material status</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the material status. Required.</p> <code>material_status</code> <code>str</code> <p>The material status name. Required.</p> Source code in <code>backend/material/api/schemas/material_status.py</code> <pre><code>class MaterialStatusOut(Schema):\n    \"\"\"\n    Schema to represent a material status\n\n    Attributes:\n        id (int): The id of the material status. Required.\n        material_status (str): The material status name. Required.\n    \"\"\"\n\n    id: int\n    material_status: str\n</code></pre>"},{"location":"api/#material.api.schemas.store.StoreIn","title":"<code>StoreIn</code>","text":"<p>Schema to validate a Store</p> <p>Attributes:</p> Name Type Description <code>store_name</code> <code>str</code> <p>The name of the Store. Required.</p> Source code in <code>backend/material/api/schemas/store.py</code> <pre><code>class StoreIn(Schema):\n    \"\"\"\n    Schema to validate a Store\n\n    Attributes:\n        store_name (str): The name of the Store. Required.\n    \"\"\"\n\n    store_name: str\n</code></pre>"},{"location":"api/#material.api.schemas.store.StoreOut","title":"<code>StoreOut</code>","text":"<p>Schema to represent a Store</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the Store. Required.</p> <code>store_name</code> <code>str</code> <p>The name of the Store. Required.</p> Source code in <code>backend/material/api/schemas/store.py</code> <pre><code>class StoreOut(Schema):\n    \"\"\"\n    Schema to represent a Store\n\n    Attributes:\n        id (int): The id of the Store. Required.\n        store_name (str): The name of the Store. Required.\n    \"\"\"\n\n    id: int\n    store_name: str\n</code></pre>"},{"location":"api/#material.api.schemas.wood_species.WoodSpeciesOut","title":"<code>WoodSpeciesOut</code>","text":"<p>Schema to represent a WoodSpecies</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the WoodSpecies. Required.</p> <code>wood_species_name</code> <code>str</code> <p>The name of the WoodSpecies. Required.</p> Source code in <code>backend/material/api/schemas/wood_species.py</code> <pre><code>class WoodSpeciesOut(Schema):\n    \"\"\"\n    Schema to represent a WoodSpecies\n\n    Attributes:\n        id (int): The id of the WoodSpecies. Required.\n        wood_species_name (str): The name of the WoodSpecies. Required.\n    \"\"\"\n\n    id: int\n    wood_species_name: str\n</code></pre>"},{"location":"api/#note","title":"Note","text":""},{"location":"api/#dependencies_2","title":"Dependencies","text":""},{"location":"api/#views_2","title":"Views","text":""},{"location":"api/#note.api.views.note.create_note","title":"<code>create_note(request, payload)</code>","text":"<p>The function <code>create_note</code> creates a Note</p> Endpoint <ul> <li>Path: <code>/api/v1/note/note/create</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>NoteIn</code> <p>An object using schema of NoteIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created Note</p> Source code in <code>backend/note/api/views/note.py</code> <pre><code>@note_router.post(\"/create\")\ndef create_note(request, payload: NoteIn):\n    \"\"\"\n    The function `create_note` creates a Note\n\n    Endpoint:\n        - **Path**: `/api/v1/note/note/create`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (NoteIn): An object using schema of NoteIn.\n\n    Returns:\n        id (int): returns the id of the created Note\n    \"\"\"\n\n    try:\n        note = Note.objects.create(**payload.dict())\n        return {\"id\": note.id}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Note already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record creation error\")\n</code></pre>"},{"location":"api/#note.api.views.note.delete_note","title":"<code>delete_note(request, note_id)</code>","text":"<p>The function <code>delete_note</code> deletes the Note specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/note/note/delete/{note_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>note_id</code> <code>int</code> <p>the id of the Note to delete</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Note with the specified ID does not exist.</p> Source code in <code>backend/note/api/views/note.py</code> <pre><code>@note_router.delete(\"/delete/{note_id}\")\ndef delete_note(request, note_id: int):\n    \"\"\"\n    The function `delete_note` deletes the Note specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/note/note/delete/{note_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        note_id (int): the id of the Note to delete\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Note with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        note = get_object_or_404(Note, id=note_id)\n        note.delete()\n        return {\"success\": True}\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#note.api.views.note.get_note","title":"<code>get_note(request, note_id)</code>","text":"<p>The function <code>get_note</code> retrieves the Note by id</p> Endpoint <ul> <li>Path: <code>/api/v1/note/note/get/{note_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>NoteOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>note_id</code> <code>int</code> <p>The id of the Note to retrieve.</p> required <p>Returns:</p> Type Description <code>NoteOut</code> <p>The Note object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Note with the specified ID does not exist.</p> Source code in <code>backend/note/api/views/note.py</code> <pre><code>@note_router.get(\n    \"/get/{note_id}\",\n    response=NoteOut,\n)\ndef get_note(request, note_id: int):\n    \"\"\"\n    The function `get_note` retrieves the Note by id\n\n    Endpoint:\n        - **Path**: `/api/v1/note/note/get/{note_id}`\n        - **Method**: `GET`\n        - **Response Model**: `NoteOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        note_id (int): The id of the Note to retrieve.\n\n    Returns:\n        (NoteOut): The Note object\n\n    Raises:\n        Http404: If the Note with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        note = get_object_or_404(Note, id=note_id)\n        return note\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#note.api.views.note.list_notes","title":"<code>list_notes(request)</code>","text":"<p>The function <code>list_notes</code> retrieves a list of notes, ordered by note_date descending.</p> Endpoint <ul> <li>Path: <code>/api/v1/note/note/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>NoteOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>NoteOut</code> <p>a list of Note objects</p> Source code in <code>backend/note/api/views/note.py</code> <pre><code>@note_router.get(\"/list\", response=List[NoteOut])\ndef list_notes(request):\n    \"\"\"\n    The function `list_notes` retrieves a list of notes,\n    ordered by note_date descending.\n\n    Endpoint:\n        - **Path**: `/api/v1/note/note/list`\n        - **Method**: `GET`\n        - **Response Model**: `NoteOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (NoteOut): a list of Note objects\n    \"\"\"\n\n    try:\n        qs = Note.objects.all().order_by(\"-note_date\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#note.api.views.note.update_note","title":"<code>update_note(request, note_id, payload)</code>","text":"<p>The function <code>update_note</code> updates the Note specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/note/note/get/{note_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>note_id</code> <code>int</code> <p>the id of the Note to update</p> required <code>payload</code> <code>NoteIn</code> <p>a Note object</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Note with the specified ID does not exist.</p> Source code in <code>backend/note/api/views/note.py</code> <pre><code>@note_router.put(\"/update/{note_id}\")\ndef update_note(request, note_id: int, payload: NoteIn):\n    \"\"\"\n    The function `update_note` updates the Note specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/note/note/get/{note_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        note_id (int): the id of the Note to update\n        payload (NoteIn): a Note object\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Note with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        note = get_object_or_404(Note, id=note_id)\n        note.save()\n        return {\"success\": True}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Note already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record update error\")\n</code></pre>"},{"location":"api/#schemas_2","title":"Schemas","text":""},{"location":"api/#note.api.schemas.note.NoteIn","title":"<code>NoteIn</code>","text":"<p>Schema to validate a Note</p> <p>Attributes:</p> Name Type Description <code>note_date</code> <code>date</code> <p>The date of this note. Required. Defaults to current date.</p> <code>note</code> <code>str</code> <p>The text of the note. Required. 508 limit.</p> <code>project_id</code> <code>Optional[int]</code> <p>A reference to a Project by ID. Defaults to None.</p> Source code in <code>backend/note/api/schemas/note.py</code> <pre><code>class NoteIn(Schema):\n    \"\"\"\n    Schema to validate a Note\n\n    Attributes:\n        note_date (date): The date of this note. Required. Defaults to\n            current date.\n        note (str): The text of the note. Required. 508 limit.\n        project_id (Optional[int]): A reference to a Project by ID. Defaults to\n            None.\n    \"\"\"\n\n    note_date: date\n    note: str\n    project_id: Optional[int] = None\n</code></pre>"},{"location":"api/#note.api.schemas.note.NoteOut","title":"<code>NoteOut</code>","text":"<p>Schema to represent a Note</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the Note.  Required.</p> <code>note</code> <code>str</code> <p>The text of the note. Required. 508 limit.</p> <code>note_date</code> <code>date</code> <p>The date of this note. Required. Defaults to current date.</p> <code>attachment</code> <code>Optional[HttpUrl]</code> <p>An attachment for this note. Defaults to None.</p> <code>project</code> <code>Optional[ProjectOut]</code> <p>A reference to a Project. Defaults to None.</p> Source code in <code>backend/note/api/schemas/note.py</code> <pre><code>class NoteOut(Schema):\n    \"\"\"\n    Schema to represent a Note\n\n    Attributes:\n        id (int): The id of the Note.  Required.\n        note (str): The text of the note. Required. 508 limit.\n        note_date (date): The date of this note. Required. Defaults to\n            current date.\n        attachment (Optional[HttpUrl]): An attachment for this note. Defaults\n            to None.\n        project (Optional[ProjectOut]): A reference to a Project. Defaults to\n            None.\n    \"\"\"\n\n    id: int\n    note_date: date\n    note: str\n    attachment: Optional[HttpUrl] = None\n    project: Optional[ProjectOut] = None\n</code></pre>"},{"location":"api/#part","title":"Part","text":""},{"location":"api/#dependencies_3","title":"Dependencies","text":""},{"location":"api/#views_3","title":"Views","text":""},{"location":"api/#part.api.views.part.create_part","title":"<code>create_part(request, payload)</code>","text":"<p>The function <code>create_part</code> creates a Part</p> Endpoint <ul> <li>Path: <code>/api/v1/part/part/create</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>PartIn</code> <p>An object using schema of PartIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created Part</p> Source code in <code>backend/part/api/views/part.py</code> <pre><code>@part_router.post(\"/create\")\ndef create_part(request, payload: PartIn):\n    \"\"\"\n    The function `create_part` creates a Part\n\n    Endpoint:\n        - **Path**: `/api/v1/part/part/create`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (PartIn): An object using schema of PartIn.\n\n    Returns:\n        id (int): returns the id of the created Part\n    \"\"\"\n\n    try:\n        part = Part.objects.create(**payload.dict())\n        return {\"id\": part.id}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Part already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record creation error\")\n</code></pre>"},{"location":"api/#part.api.views.part.delete_part","title":"<code>delete_part(request, part_id)</code>","text":"<p>The function <code>delete_part</code> deletes the Part specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/part/part/delete/{part_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>part_id</code> <code>int</code> <p>the id of the Part to delete</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Part with the specified ID does not exist.</p> Source code in <code>backend/part/api/views/part.py</code> <pre><code>@part_router.delete(\"/delete/{part_id}\")\ndef delete_part(request, part_id: int):\n    \"\"\"\n    The function `delete_part` deletes the Part specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/part/part/delete/{part_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        part_id (int): the id of the Part to delete\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Part with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        part = get_object_or_404(Part, id=part_id)\n        part.delete()\n        return {\"success\": True}\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#part.api.views.part.get_part","title":"<code>get_part(request, part_id)</code>","text":"<p>The function <code>get_part</code> retrieves the Part by id</p> Endpoint <ul> <li>Path: <code>/api/v1/part/part/get/{part_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>PartOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>part_id</code> <code>int</code> <p>The id of the Part to retrieve.</p> required <p>Returns:</p> Type Description <code>PartOut</code> <p>The Part object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Part with the specified ID does not exist.</p> Source code in <code>backend/part/api/views/part.py</code> <pre><code>@part_router.get(\n    \"/get/{part_id}\",\n    response=PartOut,\n)\ndef get_part(request, part_id: int):\n    \"\"\"\n    The function `get_part` retrieves the Part by id\n\n    Endpoint:\n        - **Path**: `/api/v1/part/part/get/{part_id}`\n        - **Method**: `GET`\n        - **Response Model**: `PartOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        part_id (int): The id of the Part to retrieve.\n\n    Returns:\n        (PartOut): The Part object\n\n    Raises:\n        Http404: If the Part with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        part = get_object_or_404(Part, id=part_id)\n        return part\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#part.api.views.part_status.get_part_status","title":"<code>get_part_status(request, part_status_id)</code>","text":"<p>The function <code>get_part_status</code> retrieves the PartStatus by id</p> Endpoint <ul> <li>Path: <code>/api/v1/part/part_status/get/{part_status_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>PartStatusOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>part_status_id</code> <code>int</code> <p>The id of the PartStatus to retrieve.</p> required <p>Returns:</p> Type Description <code>PartStatusOut</code> <p>The PartStatus object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the PartStatus with the specified ID does not exist.</p> Source code in <code>backend/part/api/views/part_status.py</code> <pre><code>@part_status_router.get(\n    \"/get/{part_status_id}\",\n    response=PartStatusOut,\n)\ndef get_part_status(request, part_status_id: int):\n    \"\"\"\n    The function `get_part_status` retrieves the PartStatus by id\n\n    Endpoint:\n        - **Path**: `/api/v1/part/part_status/get/{part_status_id}`\n        - **Method**: `GET`\n        - **Response Model**: `PartStatusOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        part_status_id (int): The id of the PartStatus to retrieve.\n\n    Returns:\n        (PartStatusOut): The PartStatus object\n\n    Raises:\n        Http404: If the PartStatus with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        part_status = get_object_or_404(PartStatus, id=part_status_id)\n        return part_status\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#part.api.views.part_status.list_part_statuses","title":"<code>list_part_statuses(request)</code>","text":"<p>The function <code>list_part_statuses</code> retrieves a list of part_statuses, ordered by id ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/part/part_status/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>PartStatusOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>PartStatusOut</code> <p>a list of PartStatus objects</p> Source code in <code>backend/part/api/views/part_status.py</code> <pre><code>@part_status_router.get(\"/list\", response=List[PartStatusOut])\ndef list_part_statuses(request):\n    \"\"\"\n    The function `list_part_statuses` retrieves a list of part_statuses,\n    ordered by id ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/part/part_status/list`\n        - **Method**: `GET`\n        - **Response Model**: `PartStatusOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (PartStatusOut): a list of PartStatus objects\n    \"\"\"\n\n    try:\n        qs = PartStatus.objects.all().order_by(\"id\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#part.api.views.part.list_parts","title":"<code>list_parts(request)</code>","text":"<p>The function <code>list_parts</code> retrieves a list of parts, ordered by part_name ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/part/part/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>PartOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>PartOut</code> <p>a list of Part objects</p> Source code in <code>backend/part/api/views/part.py</code> <pre><code>@part_router.get(\"/list\", response=List[PartOut])\ndef list_parts(request):\n    \"\"\"\n    The function `list_parts` retrieves a list of parts,\n    ordered by part_name ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/part/part/list`\n        - **Method**: `GET`\n        - **Response Model**: `PartOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (PartOut): a list of Part objects\n    \"\"\"\n\n    try:\n        qs = Part.objects.all().order_by(\"part_name\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#part.api.views.part.update_part","title":"<code>update_part(request, part_id, payload)</code>","text":"<p>The function <code>update_part</code> updates the Part specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/part/part/get/{part_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>part_id</code> <code>int</code> <p>the id of the Part to update</p> required <code>payload</code> <code>PartIn</code> <p>a Part object</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Part with the specified ID does not exist.</p> Source code in <code>backend/part/api/views/part.py</code> <pre><code>@part_router.put(\"/update/{part_id}\")\ndef update_part(request, part_id: int, payload: PartIn):\n    \"\"\"\n    The function `update_part` updates the Part specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/part/part/get/{part_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        part_id (int): the id of the Part to update\n        payload (PartIn): a Part object\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Part with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        part = get_object_or_404(Part, id=part_id)\n        part.part_name = payload.part_name\n        part.save()\n        return {\"success\": True}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Part already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record update error\")\n</code></pre>"},{"location":"api/#schemas_3","title":"Schemas","text":""},{"location":"api/#part.api.schemas.part.PartIn","title":"<code>PartIn</code>","text":"<p>Schema to validate a Part</p> <p>Attributes:</p> Name Type Description <code>quantity</code> <code>int</code> <p>The quantity of this part. Required.</p> <code>part_name</code> <code>str</code> <p>The name of the part. Required. 254 limit.</p> <code>part_status_id</code> <code>int</code> <p>A reference to a Part Status id. Required.</p> <code>rough_thickness_in</code> <code>Decimal</code> <p>The rough thickness of the part in inches. Required.</p> <code>rough_width_in</code> <code>Decimal</code> <p>The rough width of the part in inches. Required.</p> <code>rough_length_in</code> <code>Decimal</code> <p>The rough length of the part in inches. Required.</p> <code>finished_thickness_in</code> <code>Decimal</code> <p>The finished thickness of the part in inches. Required.</p> <code>finished_width_in</code> <code>Decimal</code> <p>The finished width of the part in inches. Required.</p> <code>finished_length_in</code> <code>Decimal</code> <p>The finished length of the part in inches. Required.</p> <code>project_id</code> <code>int</code> <p>A referece to a Project id. Required.</p> Source code in <code>backend/part/api/schemas/part.py</code> <pre><code>class PartIn(Schema):\n    \"\"\"\n    Schema to validate a Part\n\n    Attributes:\n        quantity (int): The quantity of this part. Required.\n        part_name (str): The name of the part. Required. 254 limit.\n        part_status_id (int): A reference to a Part Status id. Required.\n        rough_thickness_in (Decimal): The rough thickness of the part in inches.\n            Required.\n        rough_width_in (Decimal): The rough width of the part in inches. Required.\n        rough_length_in (Decimal): The rough length of the part in inches. Required.\n        finished_thickness_in (Decimal): The finished thickness of the part in inches.\n            Required.\n        finished_width_in (Decimal): The finished width of the part in inches. Required.\n        finished_length_in (Decimal): The finished length of the part in inches. Required.\n        project_id (int): A referece to a Project id. Required.\n    \"\"\"\n\n    quantity: int\n    part_name: str\n    part_status_id: int\n    rough_thickness_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    rough_width_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    rough_length_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    finished_thickness_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    finished_width_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    finished_length_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    project_id: int\n</code></pre>"},{"location":"api/#part.api.schemas.part.PartOut","title":"<code>PartOut</code>","text":"<p>Schema to represent a Part</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the Part.  Required.</p> <code>quantity</code> <code>int</code> <p>The quantity of this part. Required.</p> <code>part_name</code> <code>str</code> <p>The name of the part. Required. 254 limit.</p> <code>part_status</code> <code>PartStatusOut</code> <p>A reference to a Part Status. Required.</p> <code>rough_thickness_in</code> <code>Decimal</code> <p>The rough thickness of the part in inches. Required.</p> <code>rough_width_in</code> <code>Decimal</code> <p>The rough width of the part in inches. Required.</p> <code>rough_length_in</code> <code>Decimal</code> <p>The rough length of the part in inches. Required.</p> <code>finished_thickness_in</code> <code>Decimal</code> <p>The finished thickness of the part in inches. Required.</p> <code>finished_width_in</code> <code>Decimal</code> <p>The finished width of the part in inches. Required.</p> <code>finished_length_in</code> <code>Decimal</code> <p>The finished length of the part in inches. Required.</p> <code>project</code> <code>ProjectOut</code> <p>A referece to a Project. Required.</p> Source code in <code>backend/part/api/schemas/part.py</code> <pre><code>class PartOut(Schema):\n    \"\"\"\n    Schema to represent a Part\n\n    Attributes:\n        id (int): The id of the Part.  Required.\n        quantity (int): The quantity of this part. Required.\n        part_name (str): The name of the part. Required. 254 limit.\n        part_status (PartStatusOut): A reference to a Part Status. Required.\n        rough_thickness_in (Decimal): The rough thickness of the part in inches.\n            Required.\n        rough_width_in (Decimal): The rough width of the part in inches. Required.\n        rough_length_in (Decimal): The rough length of the part in inches. Required.\n        finished_thickness_in (Decimal): The finished thickness of the part in inches.\n            Required.\n        finished_width_in (Decimal): The finished width of the part in inches. Required.\n        finished_length_in (Decimal): The finished length of the part in inches. Required.\n        project (ProjectOut): A referece to a Project. Required.\n    \"\"\"\n\n    id: int\n    quantity: int\n    part_name: str\n    part_status: PartStatusOut\n    rough_thickness_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    rough_width_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    rough_length_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    finished_thickness_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    finished_width_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    finished_length_in: Decimal = Field(whole_digits=10, decimal_places=5)\n    project: ProjectOut\n</code></pre>"},{"location":"api/#part.api.schemas.part_status.PartStatusOut","title":"<code>PartStatusOut</code>","text":"<p>Schema to represent a PartStatus</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the PartStatus.  Required.</p> <code>part_status</code> <code>str</code> <p>The text status of a part. Required. Unique. 254 limit.</p> Source code in <code>backend/part/api/schemas/part_status.py</code> <pre><code>class PartStatusOut(Schema):\n    \"\"\"\n    Schema to represent a PartStatus\n\n    Attributes:\n        id (int): The id of the PartStatus.  Required.\n        part_status (str): The text status of a part. Required. Unique.\n            254 limit.\n    \"\"\"\n\n    id: int\n    part_status: str\n</code></pre>"},{"location":"api/#project","title":"Project","text":""},{"location":"api/#dependencies_4","title":"Dependencies","text":""},{"location":"api/#views_4","title":"Views","text":""},{"location":"api/#project.api.views.project.create_project","title":"<code>create_project(request, payload)</code>","text":"<p>The function <code>create_project</code> creates a Project</p> Endpoint <ul> <li>Path: <code>/api/v1/project/project/create</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>ProjectIn</code> <p>An object using schema of ProjectIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created Project</p> Source code in <code>backend/project/api/views/project.py</code> <pre><code>@project_router.post(\"/create\")\ndef create_project(request, payload: ProjectIn):\n    \"\"\"\n    The function `create_project` creates a Project\n\n    Endpoint:\n        - **Path**: `/api/v1/project/project/create`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (ProjectIn): An object using schema of ProjectIn.\n\n    Returns:\n        id (int): returns the id of the created Project\n    \"\"\"\n\n    try:\n        project = Project.objects.create(**payload.dict())\n        return {\"id\": project.id}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Project already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record creation error\")\n</code></pre>"},{"location":"api/#project.api.views.project.delete_project","title":"<code>delete_project(request, project_id)</code>","text":"<p>The function <code>delete_project</code> deletes the Project specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/project/project/delete/{project_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>project_id</code> <code>int</code> <p>the id of the Project to delete</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Project with the specified ID does not exist.</p> Source code in <code>backend/project/api/views/project.py</code> <pre><code>@project_router.delete(\"/delete/{project_id}\")\ndef delete_project(request, project_id: int):\n    \"\"\"\n    The function `delete_project` deletes the Project specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/project/project/delete/{project_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        project_id (int): the id of the Project to delete\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Project with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        project = get_object_or_404(Project, id=project_id)\n        project.delete()\n        return {\"success\": True}\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#project.api.views.project.get_project","title":"<code>get_project(request, project_id)</code>","text":"<p>The function <code>get_project</code> retrieves the Project by id</p> Endpoint <ul> <li>Path: <code>/api/v1/project/project/get/{project_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>ProjectOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>project_id</code> <code>int</code> <p>The id of the Project to retrieve.</p> required <p>Returns:</p> Type Description <code>ProjectOut</code> <p>The Project object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Project with the specified ID does not exist.</p> Source code in <code>backend/project/api/views/project.py</code> <pre><code>@project_router.get(\n    \"/get/{project_id}\",\n    response=ProjectOut,\n)\ndef get_project(request, project_id: int):\n    \"\"\"\n    The function `get_project` retrieves the Project by id\n\n    Endpoint:\n        - **Path**: `/api/v1/project/project/get/{project_id}`\n        - **Method**: `GET`\n        - **Response Model**: `ProjectOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        project_id (int): The id of the Project to retrieve.\n\n    Returns:\n        (ProjectOut): The Project object\n\n    Raises:\n        Http404: If the Project with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        project = get_object_or_404(Project, id=project_id)\n        return project\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#project.api.views.project_phase.get_project_phase","title":"<code>get_project_phase(request, project_phase_id)</code>","text":"<p>The function <code>get_project_phase</code> retrieves the ProjectPhase by id</p> Endpoint <ul> <li>Path: <code>/api/v1/project/project_phase/get/{project_phase_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>ProjectPhaseOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>project_phase_id</code> <code>int</code> <p>The id of the ProjectPhase to retrieve.</p> required <p>Returns:</p> Type Description <code>ProjectPhaseOut</code> <p>The ProjectPhase object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the ProjectPhase with the specified ID does not exist.</p> Source code in <code>backend/project/api/views/project_phase.py</code> <pre><code>@project_phase_router.get(\n    \"/get/{project_phase_id}\",\n    response=ProjectPhaseOut,\n)\ndef get_project_phase(request, project_phase_id: int):\n    \"\"\"\n    The function `get_project_phase` retrieves the ProjectPhase by id\n\n    Endpoint:\n        - **Path**: `/api/v1/project/project_phase/get/{project_phase_id}`\n        - **Method**: `GET`\n        - **Response Model**: `ProjectPhaseOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        project_phase_id (int): The id of the ProjectPhase to retrieve.\n\n    Returns:\n        (ProjectPhaseOut): The ProjectPhase object\n\n    Raises:\n        Http404: If the ProjectPhase with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        project_phase = get_object_or_404(ProjectPhase, id=project_phase_id)\n        return project_phase\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#project.api.views.project_status.get_project_status","title":"<code>get_project_status(request, project_status_id)</code>","text":"<p>The function <code>get_project_status</code> retrieves the ProjectStatus by id</p> Endpoint <ul> <li>Path: <code>/api/v1/project/project_status/get/{project_status_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>ProjectStatusOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>project_status_id</code> <code>int</code> <p>The id of the ProjectStatus to retrieve.</p> required <p>Returns:</p> Type Description <code>ProjectStatusOut</code> <p>The ProjectStatus object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the ProjectStatus with the specified ID does not exist.</p> Source code in <code>backend/project/api/views/project_status.py</code> <pre><code>@project_status_router.get(\n    \"/get/{project_status_id}\",\n    response=ProjectStatusOut,\n)\ndef get_project_status(request, project_status_id: int):\n    \"\"\"\n    The function `get_project_status` retrieves the ProjectStatus by id\n\n    Endpoint:\n        - **Path**: `/api/v1/project/project_status/get/{project_status_id}`\n        - **Method**: `GET`\n        - **Response Model**: `ProjectStatusOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        project_status_id (int): The id of the ProjectStatus to retrieve.\n\n    Returns:\n        (ProjectStatusOut): The ProjectStatus object\n\n    Raises:\n        Http404: If the ProjectStatus with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        project_status = get_object_or_404(ProjectStatus, id=project_status_id)\n        return project_status\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#project.api.views.project_phase.list_project_phases","title":"<code>list_project_phases(request)</code>","text":"<p>The function <code>list_project_phases</code> retrieves a list of project_phases, ordered by id ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/project/project_phase/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>ProjectPhaseOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>ProjectPhaseOut</code> <p>a list of ProjectPhase objects</p> Source code in <code>backend/project/api/views/project_phase.py</code> <pre><code>@project_phase_router.get(\"/list\", response=List[ProjectPhaseOut])\ndef list_project_phases(request):\n    \"\"\"\n    The function `list_project_phases` retrieves a list of project_phases,\n    ordered by id ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/project/project_phase/list`\n        - **Method**: `GET`\n        - **Response Model**: `ProjectPhaseOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (ProjectPhaseOut): a list of ProjectPhase objects\n    \"\"\"\n\n    try:\n        qs = ProjectPhase.objects.all().order_by(\"id\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#project.api.views.project_status.list_project_statuses","title":"<code>list_project_statuses(request)</code>","text":"<p>The function <code>list_project_statuses</code> retrieves a list of project_statuses, ordered by project_status_name ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/project/project_status/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>ProjectStatusOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>ProjectStatusOut</code> <p>a list of ProjectStatus objects</p> Source code in <code>backend/project/api/views/project_status.py</code> <pre><code>@project_status_router.get(\"/list\", response=List[ProjectStatusOut])\ndef list_project_statuses(request):\n    \"\"\"\n    The function `list_project_statuses` retrieves a list of project_statuses,\n    ordered by project_status_name ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/project/project_status/list`\n        - **Method**: `GET`\n        - **Response Model**: `ProjectStatusOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (ProjectStatusOut): a list of ProjectStatus objects\n    \"\"\"\n\n    try:\n        qs = ProjectStatus.objects.all().order_by(\"project_status_name\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#project.api.views.project.list_projects","title":"<code>list_projects(request, page=1, page_size=10, dash=False)</code>","text":"<p>The function <code>list_projects</code> retrieves a list of projects, ordered by project_name ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/project/project/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>ProjectOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>dash</code> <code>bool</code> <p>Filters projects that are not in progress or on hold. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>ProjectOut</code> <p>a list of Project objects</p> Source code in <code>backend/project/api/views/project.py</code> <pre><code>@project_router.get(\"/list\", response=PaginatedProjects)\ndef list_projects(\n    request,\n    page: Optional[int] = 1,\n    page_size: Optional[int] = 10,\n    dash: Optional[bool] = False,\n):\n    \"\"\"\n    The function `list_projects` retrieves a list of projects,\n    ordered by project_name ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/project/project/list`\n        - **Method**: `GET`\n        - **Response Model**: `ProjectOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        dash (bool): Filters projects that are not in progress\n            or on hold. Defaults to False.\n\n    Returns:\n        (ProjectOut): a list of Project objects\n    \"\"\"\n\n    try:\n        qs = None\n        if dash:\n            qs = (\n                Project.objects.all()\n                .filter(project_status__id__lt=3)\n                .order_by(\"project_status__id\", \"due_date\", \"project_name\")\n            )\n        else:\n            qs = Project.objects.all().order_by(\n                \"project_status__id\", \"due_date\", \"project_name\"\n            )\n\n        # Paginate projects\n        paginated_list, total_records, total_pages = paginate_list(\n            qs, page_size, page\n        )\n        paginated_obj = PaginatedProjects(\n            projects=paginated_list,\n            current_page=page,\n            total_pages=total_pages,\n            total_records=total_records,\n        )\n\n        return paginated_obj\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#project.api.views.project.update_project","title":"<code>update_project(request, project_id, payload)</code>","text":"<p>The function <code>update_project</code> updates the Project specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/project/project/get/{project_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>project_id</code> <code>int</code> <p>the id of the Project to update</p> required <code>payload</code> <code>ProjectIn</code> <p>a Project object</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Project with the specified ID does not exist.</p> Source code in <code>backend/project/api/views/project.py</code> <pre><code>@project_router.put(\"/update/{project_id}\")\ndef update_project(request, project_id: int, payload: ProjectIn):\n    \"\"\"\n    The function `update_project` updates the Project specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/project/project/get/{project_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        project_id (int): the id of the Project to update\n        payload (ProjectIn): a Project object\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Project with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        project = get_object_or_404(Project, id=project_id)\n        project.project_name = payload.project_name\n        project.save()\n        return {\"success\": True}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Project already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record update error\")\n</code></pre>"},{"location":"api/#schemas_4","title":"Schemas","text":""},{"location":"api/#project.api.schemas.project.PaginatedProjects","title":"<code>PaginatedProjects</code>","text":"<p>Schema to provide a paginated list of ProjectOut.</p> <p>Attributes:</p> Name Type Description <code>projects</code> <code>List[ProjectOut]</code> <p>A list of ProjectOut. Required.</p> <code>current_page</code> <code>int</code> <p>The current page returned. Required.</p> <code>total_pages</code> <code>int</code> <p>The total number of pages. Required.</p> <code>total_records</code> <code>int</code> <p>The total number of projects. Required.</p> Source code in <code>backend/project/api/schemas/project.py</code> <pre><code>class PaginatedProjects(Schema):\n    \"\"\"\n    Schema to provide a paginated list of ProjectOut.\n\n    Attributes:\n        projects (List[ProjectOut]): A list of ProjectOut. Required.\n        current_page (int): The current page returned. Required.\n        total_pages (int): The total number of pages. Required.\n        total_records (int): The total number of projects. Required.\n    \"\"\"\n\n    projects: List[ProjectOut]\n    current_page: int\n    total_pages: int\n    total_records: int\n</code></pre>"},{"location":"api/#project.api.schemas.project.ProjectIn","title":"<code>ProjectIn</code>","text":"<p>Schema to validate a Project</p> <p>Attributes:</p> Name Type Description <code>project_name</code> <code>str</code> <p>The name of the poject. Required. Unique. 254 limit.</p> <code>project_status</code> <code>ProjectStatusOut</code> <p>A reference to a Project Status. Required.</p> <code>start_date</code> <code>Optional[date]</code> <p>The date this project started. Defaults to None.</p> <code>due_date</code> <code>Optional[date]</code> <p>The date this project is due. Defaults to None.</p> <code>completed_date</code> <code>Optional[date]</code> <p>The date this project completed. Defaults to None.</p> <code>depth_in</code> <code>Optional[Decimal]</code> <p>The depth in inches. Defaults to 0.</p> <code>width_in</code> <code>Optional[Decimal]</code> <p>The width in inches. Defaults to 0.</p> <code>height_in</code> <code>Optional[Decimal]</code> <p>The height in inches. Defaults to 0.</p> Source code in <code>backend/project/api/schemas/project.py</code> <pre><code>class ProjectIn(Schema):\n    \"\"\"\n    Schema to validate a Project\n\n    Attributes:\n        project_name (str): The name of the poject. Required. Unique. 254 limit.\n        project_status (ProjectStatusOut): A reference to a Project Status. Required.\n        start_date (Optional[date]): The date this project started. Defaults to None.\n        due_date (Optional[date]): The date this project is due. Defaults to None.\n        completed_date (Optional[date]): The date this project completed. Defaults to None.\n        depth_in (Optional[Decimal]): The depth in inches. Defaults to 0.\n        width_in (Optional[Decimal]): The width in inches. Defaults to 0.\n        height_in (Optional[Decimal]): The height in inches. Defaults to 0.\n    \"\"\"\n\n    project_name: str\n    project_status: ProjectStatusOut\n    start_date: Optional[date] = None\n    due_date: Optional[date] = None\n    completed_date: Optional[date] = None\n    depth_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n    width_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n    height_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n</code></pre>"},{"location":"api/#project.api.schemas.project.ProjectOut","title":"<code>ProjectOut</code>","text":"<p>Schema to represent a Project</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the Project.  Required.</p> <code>project_name</code> <code>str</code> <p>The name of the poject. Required. Unique. 254 limit.</p> <code>project_status</code> <code>ProjectStatusOut</code> <p>A reference to a Project Status. Required.</p> <code>project_image</code> <code>Optional[str]</code> <p>An image for the project. Defaults to None.</p> <code>start_date</code> <code>Optional[date]</code> <p>The date this project started. Defaults to None.</p> <code>due_date</code> <code>Optional[date]</code> <p>The date this project is due. Defaults to None.</p> <code>completed_date</code> <code>Optional[date]</code> <p>The date this project completed. Defaults to None.</p> <code>depth_in</code> <code>Optional[Decimal]</code> <p>The depth in inches. Defaults to 0.</p> <code>width_in</code> <code>Optional[Decimal]</code> <p>The width in inches. Defaults to 0.</p> <code>height_in</code> <code>Optional[Decimal]</code> <p>The height in inches. Defaults to 0.</p> Source code in <code>backend/project/api/schemas/project.py</code> <pre><code>class ProjectOut(Schema):\n    \"\"\"\n    Schema to represent a Project\n\n    Attributes:\n        id (int): The id of the Project.  Required.\n        project_name (str): The name of the poject. Required. Unique. 254 limit.\n        project_status (ProjectStatusOut): A reference to a Project Status. Required.\n        project_image (Optional[str]): An image for the project. Defaults to None.\n        start_date (Optional[date]): The date this project started. Defaults to None.\n        due_date (Optional[date]): The date this project is due. Defaults to None.\n        completed_date (Optional[date]): The date this project completed. Defaults to None.\n        depth_in (Optional[Decimal]): The depth in inches. Defaults to 0.\n        width_in (Optional[Decimal]): The width in inches. Defaults to 0.\n        height_in (Optional[Decimal]): The height in inches. Defaults to 0.\n    \"\"\"\n\n    id: int\n    project_name: str\n    project_status: ProjectStatusOut\n    project_image: Optional[str] = None\n    start_date: Optional[date] = None\n    due_date: Optional[date] = None\n    completed_date: Optional[date] = None\n    depth_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n    width_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n    height_in: Decimal = Field(whole_digits=10, decimal_places=5, default=None)\n</code></pre>"},{"location":"api/#project.api.schemas.project_phase.ProjectPhaseOut","title":"<code>ProjectPhaseOut</code>","text":"<p>Schema to represent a ProjectPhase</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the ProjectPhase.  Required.</p> <code>project_phase</code> <code>str</code> <p>The text phase of a project. Required. Unique.</p> Source code in <code>backend/project/api/schemas/project_phase.py</code> <pre><code>class ProjectPhaseOut(Schema):\n    \"\"\"\n    Schema to represent a ProjectPhase\n\n    Attributes:\n        id (int): The id of the ProjectPhase.  Required.\n        project_phase (str): The text phase of a project. Required. Unique.\n    \"\"\"\n\n    id: int\n    project_phase: str\n</code></pre>"},{"location":"api/#project.api.schemas.project_status.ProjectStatusOut","title":"<code>ProjectStatusOut</code>","text":"<p>Schema to represent a ProjectStatus</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the ProjectStatus.  Required.</p> <code>project_status</code> <code>str</code> <p>The text status of a project. Required. Unique.</p> Source code in <code>backend/project/api/schemas/project_status.py</code> <pre><code>class ProjectStatusOut(Schema):\n    \"\"\"\n    Schema to represent a ProjectStatus\n\n    Attributes:\n        id (int): The id of the ProjectStatus.  Required.\n        project_status (str): The text status of a project. Required. Unique.\n    \"\"\"\n\n    id: int\n    project_status: str\n</code></pre>"},{"location":"api/#task","title":"Task","text":""},{"location":"api/#dependencies_5","title":"Dependencies","text":""},{"location":"api/#views_5","title":"Views","text":""},{"location":"api/#task.api.views.task.create_task","title":"<code>create_task(request, payload)</code>","text":"<p>The function <code>create_task</code> creates a Task</p> Endpoint <ul> <li>Path: <code>/api/v1/task/task/create</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>TaskIn</code> <p>An object using schema of TaskIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created Task</p> Source code in <code>backend/task/api/views/task.py</code> <pre><code>@task_router.post(\"/create\")\ndef create_task(request, payload: TaskIn):\n    \"\"\"\n    The function `create_task` creates a Task\n\n    Endpoint:\n        - **Path**: `/api/v1/task/task/create`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (TaskIn): An object using schema of TaskIn.\n\n    Returns:\n        id (int): returns the id of the created Task\n    \"\"\"\n\n    try:\n        task = Task.objects.create(**payload.dict())\n        return {\"id\": task.id}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Task already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record creation error\")\n</code></pre>"},{"location":"api/#task.api.views.task.delete_task","title":"<code>delete_task(request, task_id)</code>","text":"<p>The function <code>delete_task</code> deletes the Task specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/task/task/delete/{task_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>task_id</code> <code>int</code> <p>the id of the Task to delete</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Task with the specified ID does not exist.</p> Source code in <code>backend/task/api/views/task.py</code> <pre><code>@task_router.delete(\"/delete/{task_id}\")\ndef delete_task(request, task_id: int):\n    \"\"\"\n    The function `delete_task` deletes the Task specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/task/task/delete/{task_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        task_id (int): the id of the Task to delete\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Task with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        task = get_object_or_404(Task, id=task_id)\n        task.delete()\n        return {\"success\": True}\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#task.api.views.task.get_task","title":"<code>get_task(request, task_id)</code>","text":"<p>The function <code>get_task</code> retrieves the Task by id</p> Endpoint <ul> <li>Path: <code>/api/v1/task/task/get/{task_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>TaskOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>task_id</code> <code>int</code> <p>The id of the Task to retrieve.</p> required <p>Returns:</p> Type Description <code>TaskOut</code> <p>The Task object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Task with the specified ID does not exist.</p> Source code in <code>backend/task/api/views/task.py</code> <pre><code>@task_router.get(\n    \"/get/{task_id}\",\n    response=TaskOut,\n)\ndef get_task(request, task_id: int):\n    \"\"\"\n    The function `get_task` retrieves the Task by id\n\n    Endpoint:\n        - **Path**: `/api/v1/task/task/get/{task_id}`\n        - **Method**: `GET`\n        - **Response Model**: `TaskOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        task_id (int): The id of the Task to retrieve.\n\n    Returns:\n        (TaskOut): The Task object\n\n    Raises:\n        Http404: If the Task with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        task = get_object_or_404(Task, id=task_id)\n        return task\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#task.api.views.task_status.get_task_status","title":"<code>get_task_status(request, task_status_id)</code>","text":"<p>The function <code>get_task_status</code> retrieves the TaskStatus by id</p> Endpoint <ul> <li>Path: <code>/api/v1/task/task_status/get/{task_status_id}</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>TaskStatusOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>task_status_id</code> <code>int</code> <p>The id of the TaskStatus to retrieve.</p> required <p>Returns:</p> Type Description <code>TaskStatusOut</code> <p>The TaskStatus object</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the TaskStatus with the specified ID does not exist.</p> Source code in <code>backend/task/api/views/task_status.py</code> <pre><code>@task_status_router.get(\n    \"/get/{task_status_id}\",\n    response=TaskStatusOut,\n)\ndef get_task_status(request, task_status_id: int):\n    \"\"\"\n    The function `get_task_status` retrieves the TaskStatus by id\n\n    Endpoint:\n        - **Path**: `/api/v1/task/task_status/get/{task_status_id}`\n        - **Method**: `GET`\n        - **Response Model**: `TaskStatusOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        task_status_id (int): The id of the TaskStatus to retrieve.\n\n    Returns:\n        (TaskStatusOut): The TaskStatus object\n\n    Raises:\n        Http404: If the TaskStatus with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        task_status = get_object_or_404(TaskStatus, id=task_status_id)\n        return task_status\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#task.api.views.task_status.list_task_statuses","title":"<code>list_task_statuses(request)</code>","text":"<p>The function <code>list_task_statuses</code> retrieves a list of task_statuses, ordered by id ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/task/task_status/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>TaskStatusOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>TaskStatusOut</code> <p>a list of TaskStatus objects</p> Source code in <code>backend/task/api/views/task_status.py</code> <pre><code>@task_status_router.get(\"/list\", response=List[TaskStatusOut])\ndef list_task_statuses(request):\n    \"\"\"\n    The function `list_task_statuses` retrieves a list of task_statuses,\n    ordered by id ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/task/task_status/list`\n        - **Method**: `GET`\n        - **Response Model**: `TaskStatusOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (TaskStatusOut): a list of TaskStatus objects\n    \"\"\"\n\n    try:\n        qs = TaskStatus.objects.all().order_by(\"id\")\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#task.api.views.task.list_tasks","title":"<code>list_tasks(request)</code>","text":"<p>The function <code>list_tasks</code> retrieves a list of tasks, ordered by task_name ascending.</p> Endpoint <ul> <li>Path: <code>/api/v1/task/task/list</code></li> <li>Method: <code>GET</code></li> <li>Response Model: <code>TaskOut</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:     (TaskOut): a list of Task objects</p> Source code in <code>backend/task/api/views/task.py</code> <pre><code>@task_router.get(\"/list\", response=List[TaskOut])\ndef list_tasks(request):\n    \"\"\"\n    The function `list_tasks` retrieves a list of tasks,\n    ordered by task_name ascending.\n\n    Endpoint:\n        - **Path**: `/api/v1/task/task/list`\n        - **Method**: `GET`\n        - **Response Model**: `TaskOut`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n    Returns:\n        (TaskOut): a list of Task objects\n    \"\"\"\n\n    try:\n        qs = (\n            Task.objects.all()\n            .filter(task_status__id__lt=4)\n            .exclude(project__project_status__id__gte=3)\n            .order_by(\n                \"task_status__id\",\n                \"due_date\",\n                \"project__project_status__id\",\n                \"project__due_date\",\n                \"task_name\",\n            )\n        )\n        return qs\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record retrieval error\")\n</code></pre>"},{"location":"api/#task.api.views.task.update_task","title":"<code>update_task(request, task_id, payload)</code>","text":"<p>The function <code>update_task</code> updates the Task specified by id.</p> Endpoint <ul> <li>Path: <code>/api/v1/task/task/get/{task_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <code>task_id</code> <code>int</code> <p>the id of the Task to update</p> required <code>payload</code> <code>TaskIn</code> <p>a Task object</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True</p> <p>Raises:</p> Type Description <code>Http404</code> <p>If the Task with the specified ID does not exist.</p> Source code in <code>backend/task/api/views/task.py</code> <pre><code>@task_router.put(\"/update/{task_id}\")\ndef update_task(request, task_id: int, payload: TaskIn):\n    \"\"\"\n    The function `update_task` updates the Task specified by id.\n\n    Endpoint:\n        - **Path**: `/api/v1/task/task/get/{task_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n        task_id (int): the id of the Task to update\n        payload (TaskIn): a Task object\n\n    Returns:\n        success (bool): True\n\n    Raises:\n        Http404: If the Task with the specified ID does not exist.\n    \"\"\"\n\n    try:\n        task = get_object_or_404(Task, id=task_id)\n        task.task_name = payload.task_name\n        task.save()\n        return {\"success\": True}\n    except IntegrityError as integrity_error:\n        # Check if the integrity error is due to a duplicate\n        if \"unique constraint\" in str(integrity_error).lower():\n            raise HttpError(400, \"Task already exists\")\n        else:\n            # Log other types of integry errors\n            raise HttpError(400, \"DB integrity error\")\n    except Exception as e:\n        # Log other types of exceptions\n        raise HttpError(500, \"Record update error\")\n</code></pre>"},{"location":"api/#schemas_5","title":"Schemas","text":""},{"location":"api/#task.api.schemas.task_status.TaskStatusOut","title":"<code>TaskStatusOut</code>","text":"<p>Schema to represent a TaskStatus</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the TaskStatus.  Required.</p> <code>task_status</code> <code>str</code> <p>The status text of a task. Required. Unique. 254 limit.</p> Source code in <code>backend/task/api/schemas/task_status.py</code> <pre><code>class TaskStatusOut(Schema):\n    \"\"\"\n    Schema to represent a TaskStatus\n\n    Attributes:\n        id (int): The id of the TaskStatus.  Required.\n        task_status (str): The status text of a task. Required. Unique. 254 limit.\n    \"\"\"\n\n    id: int\n    task_status: str\n</code></pre>"},{"location":"api/#task.api.schemas.task.TaskIn","title":"<code>TaskIn</code>","text":"<p>Schema to validate a Task</p> <p>Attributes:</p> Name Type Description <code>task_name</code> <code>str</code> <p>The name of the task. Required. Unique. 254 limit.</p> <code>task_status_id</code> <code>int</code> <p>A reference to a Task Status by id. Required.</p> <code>start_date</code> <code>Optional[date]</code> <p>The date this task started. Defaults to None.</p> <code>due_date</code> <code>Optional[date]</code> <p>The date this task is due. Defaults to None.</p> <code>completed_date</code> <code>Optional[date]</code> <p>The date this task completed. Defaults to None.</p> <code>project_id</code> <code>Optional[int]</code> <p>A referece to a Project by id. Defaults to None.</p> <code>phase_id</code> <code>Optional[int]</code> <p>A reference to a Project Phase by id. Defaults to None.</p> <code>step</code> <code>Optional[int]</code> <p>The number representing the order of the step. Defaults to None.</p> <code>part</code> <code>Optional[int]</code> <p>A reference to a Part by id. Defaults to None.</p> Source code in <code>backend/task/api/schemas/task.py</code> <pre><code>class TaskIn(Schema):\n    \"\"\"\n    Schema to validate a Task\n\n    Attributes:\n        task_name (str): The name of the task. Required. Unique. 254 limit.\n        task_status_id (int): A reference to a Task Status by id. Required.\n        start_date (Optional[date]): The date this task started. Defaults to None.\n        due_date (Optional[date]): The date this task is due. Defaults to None.\n        completed_date (Optional[date]): The date this task completed. Defaults to None.\n        project_id (Optional[int]): A referece to a Project by id. Defaults to None.\n        phase_id (Optional[int]): A reference to a Project Phase by id. Defaults to None.\n        step (Optional[int]): The number representing the order of the step. Defaults to None.\n        part (Optional[int]): A reference to a Part by id. Defaults to None.\n    \"\"\"\n\n    task_name: str\n    task_status_id: int\n    start_date: Optional[date] = None\n    due_date: Optional[date] = None\n    completed_date: Optional[date] = None\n    project_id: Optional[int] = None\n    phase_id: Optional[int] = None\n    step: Optional[int] = None\n    part_id: Optional[int] = None\n</code></pre>"},{"location":"api/#task.api.schemas.task.TaskOut","title":"<code>TaskOut</code>","text":"<p>Schema to represent a Task</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The id of the Task.  Required.</p> <code>task_name</code> <code>str</code> <p>The name of the task. Required. Unique. 254 limit.</p> <code>task_status</code> <code>TaskStatusOut</code> <p>A reference to a Task Status. Required.</p> <code>start_date</code> <code>Optional[date]</code> <p>The date this task started. Defaults to None.</p> <code>due_date</code> <code>Optional[date]</code> <p>The date this task is due. Defaults to None.</p> <code>completed_date</code> <code>Optional[date]</code> <p>The date this task completed. Defaults to None.</p> <code>project</code> <code>Optional[ProjectOut]</code> <p>A referece to a Project. Defaults to None.</p> <code>phase</code> <code>Optional[ProjectPhaseOut]</code> <p>A reference to a Project Phase. Defaults to None.</p> <code>step</code> <code>Optional[int]</code> <p>The number representing the order of the step. Defaults to None.</p> <code>part</code> <code>Optional[PartOut]</code> <p>A reference to a Part. Defaults to None.</p> Source code in <code>backend/task/api/schemas/task.py</code> <pre><code>class TaskOut(Schema):\n    \"\"\"\n    Schema to represent a Task\n\n    Attributes:\n        id (int): The id of the Task.  Required.\n        task_name (str): The name of the task. Required. Unique. 254 limit.\n        task_status (TaskStatusOut): A reference to a Task Status. Required.\n        start_date (Optional[date]): The date this task started. Defaults to None.\n        due_date (Optional[date]): The date this task is due. Defaults to None.\n        completed_date (Optional[date]): The date this task completed. Defaults to None.\n        project (Optional[ProjectOut]): A referece to a Project. Defaults to None.\n        phase (Optional[ProjectPhaseOut]): A reference to a Project Phase. Defaults to None.\n        step (Optional[int]): The number representing the order of the step. Defaults to None.\n        part (Optional[PartOut]): A reference to a Part. Defaults to None.\n    \"\"\"\n\n    id: int\n    task_name: str\n    task_status: TaskStatusOut\n    start_date: Optional[date] = None\n    due_date: Optional[date] = None\n    completed_date: Optional[date] = None\n    project: Optional[ProjectOut] = None\n    phase: Optional[ProjectPhaseOut] = None\n    step: Optional[int] = None\n    part: Optional[PartOut] = None\n</code></pre>"},{"location":"models/","title":"Models","text":""},{"location":"models/#administration","title":"Administration","text":""},{"location":"models/#administration.models.SingletonModel","title":"<code>SingletonModel</code>","text":"<p>A Singleton model that ensures there is only one instance of this model that can not be deleted.</p> Source code in <code>backend/administration/models.py</code> <pre><code>class SingletonModel(models.Model):\n    \"\"\"\n    A Singleton model that ensures there is only one instance\n    of this model that can not be deleted.\n\n    \"\"\"\n\n    class Meta:\n        abstract = True\n\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Overrides save for model to ensure there is only ever 1 instance.\n\n        Raises:\n            ValidationError (String): Raises an error if there is already an instance\n                of this model.\n\n        Returns:\n            self (Model): Returns itself on save.\n        \"\"\"\n        if not self.pk and self.__class__.objects.exists():\n            raise ValidationError(\"There is already one instance of this model\")\n        return super(SingletonModel, self).save(*args, **kwargs)\n\n    def delete(self, *args, **kwargs):\n        \"\"\"\n        Overrides delete, not allowing deletions.\n\n        Raises:\n            ValidationError (String): On deletion attemp, returns an error not allowing\n                deletions.\n        \"\"\"\n        raise ValidationError(\"You cannot delete this object\")\n</code></pre>"},{"location":"models/#administration.models.SingletonModel.save","title":"<code>save(*args, **kwargs)</code>","text":"<p>Overrides save for model to ensure there is only ever 1 instance.</p> <p>Raises:</p> Type Description <code>ValidationError(String)</code> <p>Raises an error if there is already an instance of this model.</p> <p>Returns:</p> Name Type Description <code>self</code> <code>Model</code> <p>Returns itself on save.</p> Source code in <code>backend/administration/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"\n    Overrides save for model to ensure there is only ever 1 instance.\n\n    Raises:\n        ValidationError (String): Raises an error if there is already an instance\n            of this model.\n\n    Returns:\n        self (Model): Returns itself on save.\n    \"\"\"\n    if not self.pk and self.__class__.objects.exists():\n        raise ValidationError(\"There is already one instance of this model\")\n    return super(SingletonModel, self).save(*args, **kwargs)\n</code></pre>"},{"location":"models/#administration.models.SingletonModel.delete","title":"<code>delete(*args, **kwargs)</code>","text":"<p>Overrides delete, not allowing deletions.</p> <p>Raises:</p> Type Description <code>ValidationError(String)</code> <p>On deletion attemp, returns an error not allowing deletions.</p> Source code in <code>backend/administration/models.py</code> <pre><code>def delete(self, *args, **kwargs):\n    \"\"\"\n    Overrides delete, not allowing deletions.\n\n    Raises:\n        ValidationError (String): On deletion attemp, returns an error not allowing\n            deletions.\n    \"\"\"\n    raise ValidationError(\"You cannot delete this object\")\n</code></pre>"},{"location":"models/#administration.models.Version","title":"<code>Version</code>","text":"<p>Model representing app version.</p> <p>Attributes:</p> Name Type Description <code>version_number</code> <code>CharField</code> <p>The current version of the app. Required.</p> Source code in <code>backend/administration/models.py</code> <pre><code>class Version(SingletonModel):\n    \"\"\"\n    Model representing app version.\n\n    Attributes:\n        version_number (CharField): The current version of the app. Required.\n    \"\"\"\n\n    version_number = models.CharField(max_length=10)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The version number of the app.\n        \"\"\"\n        return self.version_number\n</code></pre>"},{"location":"models/#administration.models.Version.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The version number of the app.</p> Source code in <code>backend/administration/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The version number of the app.\n    \"\"\"\n    return self.version_number\n</code></pre>"},{"location":"models/#material","title":"Material","text":""},{"location":"models/#material.models.Material","title":"<code>Material</code>","text":"<p>Model representing a material.</p> <p>Attributes:</p> Name Type Description <code>material_object</code> <code>MaterialObject</code> <p>A reference to a Material Object. Required.</p> <code>quantity</code> <code>IntegerField</code> <p>The quantity of material objects. Required.</p> <code>material_status</code> <code>Optional[ForeignKey]</code> <p>A reference to a Material Status. Defaults to None.</p> <code>project</code> <code>Optional[ForeignKey]</code> <p>A refrence to a Project. Defaults to None.</p> Source code in <code>backend/material/models.py</code> <pre><code>class Material(models.Model):\n    \"\"\"\n    Model representing a material.\n\n    Attributes:\n        material_object (MaterialObject): A reference to a Material Object. Required.\n        quantity (IntegerField): The quantity of material objects. Required.\n        material_status (Optional[ForeignKey]): A reference to a Material Status.\n            Defaults to None.\n        project (Optional[ForeignKey]): A refrence to a Project. Defaults to None.\n    \"\"\"\n\n    material_object = models.ForeignKey(\n        MaterialObject, on_delete=models.CASCADE\n    )\n    quantity = models.IntegerField(default=1)\n    material_status = models.ForeignKey(\n        MaterialStatus,\n        null=True,\n        on_delete=models.SET_NULL,\n        blank=True,\n        default=None,\n    )\n    project = models.ForeignKey(\n        Project, on_delete=models.CASCADE, null=True, blank=True, default=None\n    )\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Material Object Name\n        \"\"\"\n        return self.material_object.material_object_name\n</code></pre>"},{"location":"models/#material.models.Material.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Material Object Name</p> Source code in <code>backend/material/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Material Object Name\n    \"\"\"\n    return self.material_object.material_object_name\n</code></pre>"},{"location":"models/#material.models.MaterialObject","title":"<code>MaterialObject</code>","text":"<p>Model representing a material object.</p> <p>Attributes:</p> Name Type Description <code>material_object_name</code> <code>CharField</code> <p>The name of a material object. Required.</p> <code>thickness_in</code> <code>Optional[DecimalField]</code> <p>The thickness of the object. Defaults to None.</p> <code>width_in</code> <code>Optional[DecimalField]</code> <p>The width of the object. Defaults to None.</p> <code>length_in</code> <code>Optional[DecimalField]</code> <p>The length of the object. Defaults to None.</p> <code>wood_species</code> <code>Optional[ForeignKey]</code> <p>A refernce to a Wood Species object. Defaults to None.</p> <code>store</code> <code>Optional[ForeignKey]</code> <p>A refrence to a Store. Defaults to None.</p> <code>store_aisle</code> <code>Optional[CharField]</code> <p>The aisle of Store this material object can be</p> <code>store_bin</code> <code>Optional[CharField]</code> <p>The bin of the aisle. Defaults to None.</p> <code>store_price</code> <code>Optional[DecimalField]</code> <p>The price of this material object. Defaults to 0.00.</p> <code>material_object_full_name</code> <code>CharField</code> <p>The full name of the object. Unique. Defaults to None. Limit 512. On save, set to dimensions + wood species name + material_object_name</p> Source code in <code>backend/material/models.py</code> <pre><code>class MaterialObject(models.Model):\n    \"\"\"\n    Model representing a material object.\n\n    Attributes:\n        material_object_name (CharField): The name of a material object. Required.\n        thickness_in (Optional[DecimalField]): The thickness of the object. Defaults to None.\n        width_in (Optional[DecimalField]): The width of the object. Defaults to None.\n        length_in (Optional[DecimalField]): The length of the object. Defaults to None.\n        wood_species (Optional[ForeignKey]): A refernce to a Wood Species object. Defaults to None.\n        store (Optional[ForeignKey]): A refrence to a Store. Defaults to None.\n        store_aisle (Optional[CharField]): The aisle of Store this material object can be\n        found. Defaults to None.\n        store_bin (Optional[CharField]): The bin of the aisle. Defaults to None.\n        store_price (Optional[DecimalField]): The price of this material object. Defaults to 0.00.\n        material_object_full_name (CharField): The full name of the object. Unique. Defaults to None.\n            Limit 512. On save, set to dimensions + wood species name + material_object_name\n    \"\"\"\n\n    material_object_name = models.CharField(max_length=254)\n    thickness_in = models.DecimalField(\n        max_digits=10, decimal_places=5, null=True, blank=True, default=None\n    )\n    width_in = models.DecimalField(\n        max_digits=10, decimal_places=5, null=True, blank=True, default=None\n    )\n    length_in = models.DecimalField(\n        max_digits=10, decimal_places=5, null=True, blank=True, default=None\n    )\n    wood_species = models.ForeignKey(\n        WoodSpecies,\n        null=True,\n        on_delete=models.SET_NULL,\n        blank=True,\n        default=None,\n    )\n    store = models.ForeignKey(\n        Store, null=True, on_delete=models.SET_NULL, blank=True, default=None\n    )\n    store_aisle = models.CharField(\n        max_length=254, null=True, blank=True, default=None\n    )\n    store_bin = models.CharField(\n        max_length=254, null=True, blank=True, default=None\n    )\n    store_price = models.DecimalField(\n        max_digits=12, decimal_places=2, default=0.00, blank=True, null=True\n    )\n    material_object_full_name = models.CharField(\n        max_length=512, unique=True, null=True, blank=True, default=None\n    )\n\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Override save method to compute material_full_name before saving.\n        \"\"\"\n        dimensions = \"x\".join(\n            str(value)\n            for value in [self.thickness_in, self.width_in, self.length_in]\n            if value is not None\n        )\n        wood_species_name = (\n            self.wood_species.wood_species_name if self.wood_species else \"\"\n        )\n        components = filter(\n            None, [dimensions, wood_species_name, self.material_object_name]\n        )\n        self.material_object_full_name = \" \".join(components)\n        super().save(*args, **kwargs)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Material Object Name\n        \"\"\"\n        return self.material_object_full_name\n</code></pre>"},{"location":"models/#material.models.MaterialObject.save","title":"<code>save(*args, **kwargs)</code>","text":"<p>Override save method to compute material_full_name before saving.</p> Source code in <code>backend/material/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"\n    Override save method to compute material_full_name before saving.\n    \"\"\"\n    dimensions = \"x\".join(\n        str(value)\n        for value in [self.thickness_in, self.width_in, self.length_in]\n        if value is not None\n    )\n    wood_species_name = (\n        self.wood_species.wood_species_name if self.wood_species else \"\"\n    )\n    components = filter(\n        None, [dimensions, wood_species_name, self.material_object_name]\n    )\n    self.material_object_full_name = \" \".join(components)\n    super().save(*args, **kwargs)\n</code></pre>"},{"location":"models/#material.models.MaterialObject.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Material Object Name</p> Source code in <code>backend/material/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Material Object Name\n    \"\"\"\n    return self.material_object_full_name\n</code></pre>"},{"location":"models/#material.models.MaterialStatus","title":"<code>MaterialStatus</code>","text":"<p>Model representing a status for materials.</p> <p>Attributes:</p> Name Type Description <code>material_status</code> <code>CharField</code> <p>The text status of a material. Required.</p> Source code in <code>backend/material/models.py</code> <pre><code>class MaterialStatus(models.Model):\n    \"\"\"\n    Model representing a status for materials.\n\n    Attributes:\n        material_status (CharField): The text status of a material. Required.\n    \"\"\"\n\n    material_status = models.CharField(max_length=254, unique=True)\n\n    class Meta:\n        verbose_name_plural = \"Material statuses\"\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Material Status\n        \"\"\"\n        return self.material_status\n</code></pre>"},{"location":"models/#material.models.MaterialStatus.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Material Status</p> Source code in <code>backend/material/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Material Status\n    \"\"\"\n    return self.material_status\n</code></pre>"},{"location":"models/#material.models.Store","title":"<code>Store</code>","text":"<p>Model representing a store</p> <p>Attributes:</p> Name Type Description <code>store_name</code> <code>CharField</code> <p>The name of a store. Required. Unique.</p> Source code in <code>backend/material/models.py</code> <pre><code>class Store(models.Model):\n    \"\"\"\n    Model representing a store\n\n    Attributes:\n        store_name (CharField): The name of a store. Required. Unique.\n    \"\"\"\n\n    store_name = models.CharField(max_length=254, unique=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Store Name\n        \"\"\"\n        return self.store_name\n</code></pre>"},{"location":"models/#material.models.Store.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Store Name</p> Source code in <code>backend/material/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Store Name\n    \"\"\"\n    return self.store_name\n</code></pre>"},{"location":"models/#material.models.WoodSpecies","title":"<code>WoodSpecies</code>","text":"<p>Model representing a wood species for materials.</p> <p>Attributes:</p> Name Type Description <code>wood_species_name</code> <code>CharField</code> <p>The name of a species of wood. Required.</p> Source code in <code>backend/material/models.py</code> <pre><code>class WoodSpecies(models.Model):\n    \"\"\"\n    Model representing a wood species for materials.\n\n    Attributes:\n        wood_species_name (CharField): The name of a species of wood. Required.\n    \"\"\"\n\n    wood_species_name = models.CharField(max_length=254, unique=True)\n\n    class Meta:\n        verbose_name_plural = \"Wood species\"\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Wood Species Name\n        \"\"\"\n        return self.wood_species_name\n</code></pre>"},{"location":"models/#material.models.WoodSpecies.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Wood Species Name</p> Source code in <code>backend/material/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Wood Species Name\n    \"\"\"\n    return self.wood_species_name\n</code></pre>"},{"location":"models/#note","title":"Note","text":""},{"location":"models/#note.models.attachment_name","title":"<code>attachment_name(instance, filename)</code>","text":"<p>Takes a file instance and returns the attachment path with the file name.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> required <code>filename</code> <code>String</code> <p>The name of the file</p> required <p>Returns:</p> Type Description <code>String</code> <p>The path to attachments with the filename</p> Source code in <code>backend/note/models.py</code> <pre><code>def attachment_name(instance, filename):\n    \"\"\"\n    Takes a file instance and returns the attachment path with\n    the file name.\n\n    Args:\n        instance ():\n        filename (String): The name of the file\n\n    Returns:\n        (String): The path to attachments with the filename\n    \"\"\"\n    return f\"attachments/{filename}\"\n</code></pre>"},{"location":"models/#note.models.Note","title":"<code>Note</code>","text":"<p>Model representing a note.</p> <p>Attributes:</p> Name Type Description <code>note_date</code> <code>DateField</code> <p>The date of the note. Required.</p> <code>note</code> <code>CharField</code> <p>The text of the note. Required.</p> <code>attachment</code> <code>Optional[FileField]</code> <p>Any attachment associated with this note. Dafaults to None.</p> <code>project</code> <code>Optional[ForeignKey]</code> <p>A reference to a Project. Defaults to None.</p> Source code in <code>backend/note/models.py</code> <pre><code>class Note(models.Model):\n    \"\"\"\n    Model representing a note.\n\n    Attributes:\n        note_date (DateField): The date of the note. Required.\n        note (CharField): The text of the note. Required.\n        attachment (Optional[FileField]): Any attachment associated with this\n            note. Dafaults to None.\n        project (Optional[ForeignKey]): A reference to a Project. Defaults to\n            None.\n    \"\"\"\n\n    note_date = models.DateField(default=current_date)\n    note = models.CharField(max_length=508)\n    attachment = models.FileField(\n        upload_to=attachment_name, null=True, blank=True, default=None\n    )\n    project = models.ForeignKey(\n        Project, on_delete=models.CASCADE, null=True, blank=True, default=None\n    )\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Note Date\n        \"\"\"\n        return self.note_date.strftime(\"%Y-%m-%d\")\n</code></pre>"},{"location":"models/#note.models.Note.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Note Date</p> Source code in <code>backend/note/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Note Date\n    \"\"\"\n    return self.note_date.strftime(\"%Y-%m-%d\")\n</code></pre>"},{"location":"models/#part","title":"Part","text":""},{"location":"models/#part.models.Part","title":"<code>Part</code>","text":"<p>Model representing a part.</p> <p>Attributes:</p> Name Type Description <code>quantity</code> <code>IntegerField</code> <p>The quantity of this part. Required.</p> <code>part_name</code> <code>CharField</code> <p>The name of the part. Required. 254 limit.</p> <code>part_status</code> <code>PartStatus</code> <p>A reference to a Part Status. Required.</p> <code>rough_thickness_in</code> <code>DecimalField</code> <p>The rough thickness of the part in inches. Required.</p> <code>rough_width_in</code> <code>DecimalField</code> <p>The rough width of the part in inches. Required.</p> <code>rough_length_in</code> <code>DecimalField</code> <p>The rough length of the part in inches. Required.</p> <code>finished_thickness_in</code> <code>DecimalField</code> <p>The finished thickness of the part in inches. Required.</p> <code>finished_width_in</code> <code>DecimalField</code> <p>The finished width of the part in inches. Required.</p> <code>finished_length_in</code> <code>DecimalField</code> <p>The finished length of the part in inches. Required.</p> <code>project</code> <code>Project</code> <p>A referece to a Project. Required.</p> Source code in <code>backend/part/models.py</code> <pre><code>class Part(models.Model):\n    \"\"\"\n\n    Model representing a part.\n\n    Attributes:\n        quantity (IntegerField): The quantity of this part. Required.\n        part_name (CharField): The name of the part. Required. 254 limit.\n        part_status (PartStatus): A reference to a Part Status. Required.\n        rough_thickness_in (DecimalField): The rough thickness of the part in inches.\n            Required.\n        rough_width_in (DecimalField): The rough width of the part in inches. Required.\n        rough_length_in (DecimalField): The rough length of the part in inches. Required.\n        finished_thickness_in (DecimalField): The finished thickness of the part in inches.\n            Required.\n        finished_width_in (DecimalField): The finished width of the part in inches. Required.\n        finished_length_in (DecimalField): The finished length of the part in inches. Required.\n        project (Project): A referece to a Project. Required.\n\n    \"\"\"\n\n    quantity = models.IntegerField()\n    part_name = models.CharField(max_length=254)\n    part_status = models.ForeignKey(\n        PartStatus, null=True, on_delete=models.SET_NULL\n    )\n    rough_thickness_in = models.DecimalField(max_digits=10, decimal_places=5)\n    rough_width_in = models.DecimalField(max_digits=10, decimal_places=5)\n    rough_length_in = models.DecimalField(max_digits=10, decimal_places=5)\n    finished_thickness_in = models.DecimalField(max_digits=10, decimal_places=5)\n    finished_width_in = models.DecimalField(max_digits=10, decimal_places=5)\n    finished_length_in = models.DecimalField(max_digits=10, decimal_places=5)\n    project = models.ForeignKey(\n        Project, null=True, on_delete=models.SET_NULL, blank=True, default=None\n    )\n\n    def __str__(self):\n        return self.part_name\n</code></pre>"},{"location":"models/#part.models.Part.__str__","title":"<code>__str__()</code>","text":"Source code in <code>backend/part/models.py</code> <pre><code>def __str__(self):\n    return self.part_name\n</code></pre>"},{"location":"models/#part.models.PartStatus","title":"<code>PartStatus</code>","text":"<p>Model representing a status for parts.</p> <p>Attributes:</p> Name Type Description <code>part_status</code> <code>CharField</code> <p>The text status of a part. Required.</p> Source code in <code>backend/part/models.py</code> <pre><code>class PartStatus(models.Model):\n    \"\"\"\n\n    Model representing a status for parts.\n\n    Attributes:\n        part_status (CharField): The text status of a part. Required.\n\n    \"\"\"\n\n    part_status = models.CharField(max_length=254, unique=True)\n\n    class Meta:\n        verbose_name_plural = \"Part statuses\"\n\n    def __str__(self):\n        return self.part_status\n</code></pre>"},{"location":"models/#part.models.PartStatus.__str__","title":"<code>__str__()</code>","text":"Source code in <code>backend/part/models.py</code> <pre><code>def __str__(self):\n    return self.part_status\n</code></pre>"},{"location":"models/#project","title":"Project","text":""},{"location":"models/#project.models.Project","title":"<code>Project</code>","text":"<p>Model representing a project.</p> <p>Attributes:</p> Name Type Description <code>project_name</code> <code>CharField</code> <p>The name of the poject. Required. Unique. 254 limit.</p> <code>project_status</code> <code>ProjectStatus</code> <p>A reference to a Project Status. Required.</p> <code>project_image</code> <code>Optional[FileField]</code> <p>An image for the project. Defaults to None.</p> <code>start_date</code> <code>Optional[DateField]</code> <p>The date this project started. Defaults to None.</p> <code>due_date</code> <code>Optional[DateField]</code> <p>The date this project is due. Defaults to None.</p> <code>completed_date</code> <code>Optioanl[DateField]</code> <p>The date this project completed. Defaults to None.</p> <code>depth_in</code> <code>Optional[DecimalField]</code> <p>The depth in inches. Defaults to 0.</p> <code>width_in</code> <code>Optional[DecimalField]</code> <p>The width in inches. Defaults to 0.</p> <code>height_in</code> <code>Optional[DecimalField]</code> <p>The height in inches. Defaults to 0.</p> Source code in <code>backend/project/models.py</code> <pre><code>class Project(models.Model):\n    \"\"\"\n\n    Model representing a project.\n\n    Attributes:\n        project_name (CharField): The name of the poject. Required. Unique. 254 limit.\n        project_status (ProjectStatus): A reference to a Project Status. Required.\n        project_image (Optional[FileField]): An image for the project. Defaults to None.\n        start_date (Optional[DateField]): The date this project started. Defaults to None.\n        due_date (Optional[DateField]): The date this project is due. Defaults to None.\n        completed_date (Optioanl[DateField]): The date this project completed. Defaults to None.\n        depth_in (Optional[DecimalField]): The depth in inches. Defaults to 0.\n        width_in (Optional[DecimalField]): The width in inches. Defaults to 0.\n        height_in (Optional[DecimalField]): The height in inches. Defaults to 0.\n\n    \"\"\"\n\n    project_name = models.CharField(max_length=254, unique=True)\n    project_status = models.ForeignKey(\n        ProjectStatus, null=True, on_delete=models.SET_NULL\n    )\n    project_image = models.FileField(\n        upload_to=image_name, default=None, null=True, blank=True\n    )\n    start_date = models.DateField(null=True, blank=True, default=None)\n    due_date = models.DateField(null=True, blank=True, default=None)\n    completed_date = models.DateField(null=True, blank=True, default=None)\n    depth_in = models.DecimalField(\n        max_digits=10, decimal_places=5, null=True, blank=True, default=0\n    )\n    width_in = models.DecimalField(\n        max_digits=10, decimal_places=5, null=True, blank=True, default=0\n    )\n    height_in = models.DecimalField(\n        max_digits=10, decimal_places=5, null=True, blank=True, default=0\n    )\n\n    def __str__(self):\n        return self.project_name\n</code></pre>"},{"location":"models/#project.models.Project.__str__","title":"<code>__str__()</code>","text":"Source code in <code>backend/project/models.py</code> <pre><code>def __str__(self):\n    return self.project_name\n</code></pre>"},{"location":"models/#project.models.ProjectPhase","title":"<code>ProjectPhase</code>","text":"<p>Model representing a phase for projects.</p> <p>Attributes:</p> Name Type Description <code>project_phase</code> <code>CharField</code> <p>The text phase of a project. Required. Unique.</p> Source code in <code>backend/project/models.py</code> <pre><code>class ProjectPhase(models.Model):\n    \"\"\"\n\n    Model representing a phase for projects.\n\n    Attributes:\n        project_phase (CharField): The text phase of a project. Required. Unique.\n\n    \"\"\"\n\n    project_phase = models.CharField(max_length=254, unique=True)\n\n    def __str__(self):\n        return self.project_phase\n</code></pre>"},{"location":"models/#project.models.ProjectPhase.__str__","title":"<code>__str__()</code>","text":"Source code in <code>backend/project/models.py</code> <pre><code>def __str__(self):\n    return self.project_phase\n</code></pre>"},{"location":"models/#project.models.ProjectStatus","title":"<code>ProjectStatus</code>","text":"<p>Model representing a status for projects.</p> <p>Attributes:</p> Name Type Description <code>project_status</code> <code>CharField</code> <p>The text status of a project. Required.  Unique.</p> Source code in <code>backend/project/models.py</code> <pre><code>class ProjectStatus(models.Model):\n    \"\"\"\n\n    Model representing a status for projects.\n\n    Attributes:\n        project_status (CharField): The text status of a project. Required.  Unique.\n\n    \"\"\"\n\n    project_status = models.CharField(max_length=254, unique=True)\n\n    class Meta:\n        verbose_name_plural = \"Project statuses\"\n\n    def __str__(self):\n        return self.project_status\n</code></pre>"},{"location":"models/#project.models.ProjectStatus.__str__","title":"<code>__str__()</code>","text":"Source code in <code>backend/project/models.py</code> <pre><code>def __str__(self):\n    return self.project_status\n</code></pre>"},{"location":"models/#task","title":"Task","text":""},{"location":"models/#task.models.Task","title":"<code>Task</code>","text":"<p>Model representing a task.</p> <p>Attributes:</p> Name Type Description <code>task_name</code> <code>CharField</code> <p>The name of the task. Required. Unique. 254 limit.</p> <code>task_status</code> <code>TaskStatus</code> <p>A reference to a Task Status. Required.</p> <code>start_date</code> <code>Optional[DateField]</code> <p>The date this task started. Defaults to None.</p> <code>due_date</code> <code>Optional[DateField]</code> <p>The date this task is due. Defaults to None.</p> <code>completed_date</code> <code>Optional[DateField]</code> <p>The date this task completed. Defaults to None.</p> <code>project</code> <code>Optional[Project]</code> <p>A referece to a Project. Defaults to None.</p> <code>phase</code> <code>Optional[ProjectPhase]</code> <p>A reference to a Project Phase. Defaults to None.</p> <code>step</code> <code>Optional[IntegerField]</code> <p>The number representing the order of the step. Defaults to None.</p> <code>part</code> <code>Optioanl[Part]</code> <p>A reference to a Part. Defaults to None.</p> Source code in <code>backend/task/models.py</code> <pre><code>class Task(models.Model):\n    \"\"\"\n\n    Model representing a task.\n\n    Attributes:\n        task_name (CharField): The name of the task. Required. Unique. 254 limit.\n        task_status (TaskStatus): A reference to a Task Status. Required.\n        start_date (Optional[DateField]): The date this task started. Defaults to None.\n        due_date (Optional[DateField]): The date this task is due. Defaults to None.\n        completed_date (Optional[DateField]): The date this task completed. Defaults to None.\n        project (Optional[Project]): A referece to a Project. Defaults to None.\n        phase (Optional[ProjectPhase]): A reference to a Project Phase. Defaults to None.\n        step (Optional[IntegerField]): The number representing the order of the step. Defaults to None.\n        part (Optioanl[Part]): A reference to a Part. Defaults to None.\n\n    \"\"\"\n\n    task_name = models.CharField(max_length=254, unique=True)\n    task_status = models.ForeignKey(\n        TaskStatus, null=True, on_delete=models.SET_NULL\n    )\n    start_date = models.DateField(null=True, blank=True, default=None)\n    due_date = models.DateField(null=True, blank=True, default=None)\n    completed_date = models.DateField(null=True, blank=True, default=None)\n    project = models.ForeignKey(\n        Project, null=True, on_delete=models.SET_NULL, blank=True, default=None\n    )\n    phase = models.ForeignKey(\n        ProjectPhase,\n        null=True,\n        on_delete=models.SET_NULL,\n        blank=True,\n        default=None,\n    )\n    step = models.IntegerField(blank=True, null=True, default=None)\n    part = models.ForeignKey(\n        Part, null=True, on_delete=models.SET_NULL, blank=True, default=None\n    )\n\n    def __str__(self):\n        return self.task_name\n</code></pre>"},{"location":"models/#task.models.Task.__str__","title":"<code>__str__()</code>","text":"Source code in <code>backend/task/models.py</code> <pre><code>def __str__(self):\n    return self.task_name\n</code></pre>"},{"location":"models/#task.models.TaskStatus","title":"<code>TaskStatus</code>","text":"<p>Model representing a status for projects.</p> <p>Attributes:</p> Name Type Description <code>task_status</code> <code>CharField</code> <p>The text status of a task. Required.</p> Source code in <code>backend/task/models.py</code> <pre><code>class TaskStatus(models.Model):\n    \"\"\"\n\n    Model representing a status for projects.\n\n    Attributes:\n        task_status (CharField): The text status of a task. Required.\n\n    \"\"\"\n\n    task_status = models.CharField(max_length=254, unique=True)\n\n    class Meta:\n        verbose_name_plural = \"Task statuses\"\n\n    def __str__(self):\n        return self.task_status\n</code></pre>"},{"location":"models/#task.models.TaskStatus.__str__","title":"<code>__str__()</code>","text":"Source code in <code>backend/task/models.py</code> <pre><code>def __str__(self):\n    return self.task_status\n</code></pre>"}]}